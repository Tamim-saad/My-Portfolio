openapi: 3.0.0
info:
  title: traQ v3
  version: '3.0'
  description: traQ v3 API
  license:
    name: MIT
    url: 'https://github.com/traPtitech/traQ/blob/master/LICENSE'
  contact:
    name: traP
    url: 'https://github.com/traPtitech/traQ'
servers:
  - url: 'https://traq.duckdns.org/api/v3'
    description: production
  
paths:
  '/channels/{channelId}/messages':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    post:
      summary: Post a message to a channel
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Channel not found.
      description: |-
        Posts a message to a specified channel.
        If you set embed to true, message embedding will be done automatically.
        You can't post to an archived channel.
      operationId: postMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageRequest'
        description: ''
      tags:
        - message
        - channel
    get:
      summary: Get a list of channel messages
      description: Gets a list of messages for a given channel.
      operationId: getMessages
      tags:
        - channel
        - message
      parameters:
        - $ref: '#/components/parameters/limitInQuery'
        - $ref: '#/components/parameters/offsetInQuery'
        - $ref: '#/components/parameters/sinceInQuery'
        - $ref: '#/components/parameters/untilInQuery'
        - $ref: '#/components/parameters/inclusiveInQuery'
        - $ref: '#/components/parameters/orderInQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of messages.
                items:
                  $ref: '#/components/schemas/Message'
          headers:
            X-TRAQ-MORE:
              $ref: '#/components/headers/X-TRAQ-MORE'
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Channel not found.
  '/messages':
    get:
      summary: Search for messages
      description: Searches for messages.
      operationId: searchMessages
      tags:
        - message
      parameters:
        - schema:
            type: string
          in: query
          name: word
          description: |
            Search terms
            Parses and searches Simple-Query-String-Syntax
          example: '"phrase match" +(foo | bar) -baz'
        - schema:
            type: string
            format: date-time
          in: query
          name: after
          description: Posted after the specified date and time
          example: 2006-01-02T15:04:05Z
        - schema:
            type: string
            format: date-time
          in: query
          name: before
          description: Posted before the specified date and time
          example: 2006-01-02T15:04:05Z
        - schema:
            type: string
            format: uuid
          in: query
          name: in
          description: The channel the message was posted in
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: to
          description: The mentioned user
        - schema:
            type: array
            items:
              type: string
              format: uuid
          in: query
          name: from
          description: The user who posted the message
        - schema:
            type: string
            format: uuid
          in: query
          name: citation
          description: The message being quoted
        - schema:
            type: boolean
          in: query
          name: bot
          description: Whether the user who posted the message is a bot
        - schema:
            type: boolean
          in: query
          name: hasURL
          description: Does the message contain a URL?
        - schema:
            type: boolean
          in: query
          name: hasAttachments
          description: Whether the message contains attachments
        - schema:
            type: boolean
          in: query
          name: hasImage
          description: whether the message contains an image
        - schema:
            type: boolean
          in: query
          name: hasVideo
          description: Whether the message contains a video
        - schema:
            type: boolean
          in: query
          name: hasAudio
          description: Whether the message contains an audio file
        - schema:
            type: integer
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: The maximum number of messages to return from a search result.
        - schema:
            type: integer
            minimum: 0
            maximum: 9900
          in: query
          name: offset
          description: The offset of the message to retrieve from the search results.
        - in: query
          name: sort
          schema:
            type: string
            default: '-createdAt'
            enum:
              - createdAt
              - '-createdAt'
              - updatedAt
              - '-updatedAt'
          description: 'Sort by (newer creation time `createdAt`, older creation time `-createdAt`, newer update time `updatedAt`, older update time `-updatedAt`)'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: MessageSearchResult
                type: object
                description: Message search results
                properties:
                  totalHits:
                    type: integer
                    format: int64
                    description: Number of messages found in the search
                  hits:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                    description: An array of messages that matched the search.
                required:
                  - totalHits
                  - hits
        '400':
          description: Bad Request
        '503':
          description: search service is currently unavailable
  '/messages/{messageId}':
    parameters:
      - $ref: '#/components/parameters/messageIdInPath'
    get:
      summary: get message
      tags:
        - message
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Not Found
      operationId: getMessage
      description: Gets the specified message.
    put:
      summary: Edit message
      responses:
        '204':
          description: |-
            No Content
            I was able to edit the message.
        '400':
          description: Bad Request
        '403':
          description: |-
            Forbidden
            You do not have permission to edit the specified message.
        '404':
          description: Not Found
      description: |-
        Edit the specified message.
        You can only edit messages that you have posted.
        You cannot edit messages in an archived channel.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageRequest'
      tags:
        - message
      operationId: editMessage
    delete:
      summary: Delete messages
      responses:
        '204':
          description: |-
            No Content
            The deletion was successful.
        '403':
          description: |-
            Forbidden
            You do not have permission to delete the specified message.
        '404':
          description: Not Found
      tags:
        - message
      operationId: deleteMessage
      description: |-
        Deletes the specified message.
        You can only delete messages that you posted, or messages posted by webhooks and bots for which you have administrative permissions.
        You cannot edit messages in an archived channel.
  '/messages/{messageId}/pin':
    parameters:
      - $ref: '#/components/parameters/messageIdInPath'
    get:
      summary: Get pins
      tags:
        - message
        - pin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagePin'
        '404':
          description: |-
            Not Found
            The specified message or pin was not found.
      operationId: getPin
      description: Gets the pinning information for the specified message.
    post:
      summary: Pin
      responses:
        '201':
          description: |-
            Created
            The specified message has been pinned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagePin'
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Message not found.
      tags:
        - message
        - pin
      operationId: createPin
      description: |-
        Pins the specified message.
        You can't pin messages in archived channels, messages that don't exist, or messages that exceed the limit per channel.
    delete:
      summary: Unpin
      responses:
        '204':
          description: |-
            No Content
            The specified message has been unpinned.
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            The specified message or pin was not found.
      description: Unpins the specified message.
      tags:
        - message
        - pin
      operationId: removePin
  '/channels/{channelId}/stats':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    get:
      summary: Get channel statistics
      tags:
        - channel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelStats'
        '404':
          description: |-
            Not Found
            Channel not found.
      operationId: getChannelStats
      description: Gets the statistics for the specified channel.
  '/channels/{channelId}/topic':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    get:
      summary: Get channel topic
      tags:
        - channel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelTopic'
        '404':
          description: |-
            Not Found
            Channel not found.
      operationId: getChannelTopic
      description: Gets the topic of the specified channel.
    put:
      summary: Edit channel topic
      responses:
        '204':
          description: |-
            No Content
            Channel topic edited
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Channel not found.
      tags:
        - channel
      description: |-
        Edit the topic of the specified channel.
        You can't edit the topics of archived channels.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutChannelTopicRequest'
      operationId: editChannelTopic
  '/channels/{channelId}/viewers':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    get:
      summary: Get channel viewers list
      tags:
        - channel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of channel viewers.
                items:
                  $ref: '#/components/schemas/ChannelViewer'
        '404':
          description: |-
            Not Found
            Channel not found.
      operationId: getChannelViewers
      description: Gets the list of viewers for the specified channel.
  /files:
    post:
      summary: Upload file
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '400':
          description: Bad Request
        '411':
          description: Length Required
        '413':
          description: Request Entity Too Large
      tags:
        - file
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostFileRequest'
      operationId: postFile
      description: |-
        Uploads a file to the specified channel.
        You cannot upload to an archived channel.
    get:
      summary: Get the list of file meta
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of file meta.
                items:
                  $ref: '#/components/schemas/FileInfo'
          headers:
            X-TRAQ-MORE:
              $ref: '#/components/headers/X-TRAQ-MORE'
        '400':
          description: Bad Request
      tags:
        - file
      operationId: getFiles
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: channelId
          description: The upload destination channel UUID
        - $ref: '#/components/parameters/limitInQuery'
        - $ref: '#/components/parameters/offsetInQuery'
        - $ref: '#/components/parameters/sinceInQuery'
        - $ref: '#/components/parameters/untilInQuery'
        - $ref: '#/components/parameters/inclusiveInQuery'
        - $ref: '#/components/parameters/orderInQuery'
        - schema:
            type: boolean
            default: false
          in: query
          name: mine
          description: Whether uploaders should get only their own files
      description: |-
        Gets a list of file meta for a given query.
        At least one of the query parameters `channelId`, `mine` is required.
  '/files/{fileId}/meta':
    parameters:
      - $ref: '#/components/parameters/fileIdInPath'
    get:
      summary: Get file meta
      tags:
        - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            file not found.
      operationId: getFileMeta
      description: |-
        Gets the meta information of the specified file.
        You must have permission to access the specified file.
  '/files/{fileId}/thumbnail':
    parameters:
      - $ref: '#/components/parameters/fileIdInPath'
      - schema:
          $ref: '#/components/schemas/ThumbnailType'
        in: query
        name: type
        description: The type of thumbnail to retrieve.
    get:
      summary: Gets the thumbnail image
      tags:
        - file
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            File not found or thumbnail image does not exist.
      operationId: getThumbnailImage
      description: |-
        Gets a thumbnail image of the specified file.
        You must have permission to access the specified file.
  '/files/{fileId}':
    parameters:
      - $ref: '#/components/parameters/fileIdInPath'
    get:
      summary: Download file
      tags:
        - file
      responses:
        '200':
          description: |-
            OK
            Returns the file body.
            It is supposed to be returned as application/octet-stream, but this varies depending on the file format.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
              description: 'https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition'
        '403':
          description: Forbidden
        '404':
          description: Not Found
      parameters:
        - schema:
            type: integer
          in: query
          name: dl
          description: Specifying 1 will add a Content-Disposition header to the response
      operationId: getFile
      description: |-
        Gets the body of the specified file.
        You must have permission to access the specified file.
    delete:
      summary: Delete the file
      responses:
        '204':
          description: |-
            No Content
            The file has been deleted.
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - file
      operationId: deleteFile
      description: |-
        Deletes the specified file.
        You must have permission to delete the specified file.
  '/channels/{channelId}/pins':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    get:
      summary: Gets the list of channel pins
      tags:
        - channel
        - pin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pin'
        '404':
          description: |-
            Not Found
            Channel not found.
      operationId: getChannelPins
      description: Gets a list of pinned messages for a specified channel.
  '/messages/{messageId}/stamps':
    parameters:
      - $ref: '#/components/parameters/messageIdInPath'
    get:
      summary: Get the stamp list for the message
      tags:
        - message
        - stamp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageStamp'
        '404':
          description: Not Found
      description: Gets a list of stamps that are applied to the specified message.
      operationId: getMessageStamps
  '/messages/{messageId}/stamps/{stampId}':
    parameters:
      - $ref: '#/components/parameters/messageIdInPath'
      - $ref: '#/components/parameters/stampIdInPath'
    post:
      summary: Stamp
      responses:
        '204':
          description: |-
            No Content
            I was able to stamp it.
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Message or stamp not found.
      operationId: addMessageStamp
      tags:
        - message
        - stamp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageStampRequest'
        description: ''
      description: Applies the specified stamp to the specified message.
    delete:
      summary: Erase stamp
      responses:
        '204':
          description: |-
            No Content
            I was able to erase the stamp.
        '404':
          description: |-
            Not Found
            Message or stamp not found.
      operationId: removeMessageStamp
      tags:
        - message
        - stamp
      description: Removes the specified self-stamp from the specified message.
  '/stamps/{stampId}':
    parameters:
      - $ref: '#/components/parameters/stampIdInPath'
    get:
      summary: Get stamp information
      tags:
        - stamp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stamp'
        '404':
          description: Not Found
      operationId: getStamp
      description: Gets the description of the specified stamp.
    delete:
      summary: Remove stamp
      responses:
        '204':
          description: |-
            No Content
            The stamp has been removed.
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: |-
        Deletes the specified stamp.
        You must have permission to delete the stamp in question.
      operationId: deleteStamp
      tags:
        - stamp
    patch:
      summary: Change stamp information
      operationId: editStamp
      responses:
        '204':
          description: |-
            No Content
            The stamp information has been changed.
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict
      tags:
        - stamp
      description: Changes the description of the specified stamp.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchStampRequest'
  /stamps:
    post:
      summary: Create a stamp
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stamp'
        '400':
          description: Bad Request
        '409':
          description: Conflict
        '413':
          description: Request Entity Too Large
      description: Creates a new stamp.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostStampRequest'
            encoding:
              file:
                contentType: 'image/png, image/jpeg, image/gif'
        description: ''
      operationId: createStamp
      tags:
        - stamp
    get:
      summary: Get stamp list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StampWithThumbnail'
      operationId: getStamps
      tags:
        - stamp
      parameters:
        - schema:
            type: boolean
            default: true
          in: query
          name: include-unicode
          deprecated: true
          description: |
            Whether to include Unicode emojis
            Deprecated: If you do not specify a type query, you can get all stamps. Please use that.
        - schema:
            type: string
            enum: [unicode, original]
          in: query
          name: type
          description: The type of stamp to get
      description: Gets the list of stamps.
  /users/me/stamp-history:
    get:
      summary: Get stamp history
      tags:
        - stamp
        - me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StampHistoryEntry'
      operationId: getMyStampHistory
      parameters:
        - schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 1
          in: query
          name: limit
          description: Count
      description: |-
        Get your stamp history up to 100 items.
        The results are returned in descending order.

        The stamp history returned by this API is not a strict history.
  /users/me/qr-code:
    get:
      summary: Get QR code
      tags:
        - me
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
                description: QR code image
            text/plain:
              schema:
                type: string
                description: QR Code JWT
      description: |-
        Get your own QR code.
        The returned QR code or token is only valid for 5 minutes after it is issued.
      operationId: getMyQRCode
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: token
          description: Whether to return a token string instead of an image
  '/stamps/{stampId}/stats':
    parameters:
      - $ref: '#/components/parameters/stampIdInPath'
    get:
      summary: Get stamp statistics
      tags:
        - stamp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StampStats'
        '404':
          description: |-
            Not Found
            Stamp not found.
      operationId: getStampStats
      description: Gets the statistics for the specified stamp.
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/userIdInPath'
    get:
      summary: Get detailed user information
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '404':
          description: Not Found
      operationId: getUser
      description: Gets detailed information about the specified user.
    patch:
      summary: Change user information
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: editUser
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
      description: |-
        Changes the information for the specified user.
        Administrator privileges are required.
  '/groups/{groupId}':
    parameters:
      - $ref: '#/components/parameters/groupIdInPath'
    get:
      summary: Get user groups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '404':
          description: Not Found
      operationId: getUserGroup
      tags:
        - group
      description: Gets information about the specified user group.
    delete:
      summary: Delete a user group
      responses:
        '204':
          description: |-
            No Content
            The user group has been deleted.
        '403':
          description: |-
            Forbidden
            You do not have permission to operate user groups.
        '404':
          description: Not Found
      description: |-
        Deletes the specified user group.
        You must have administrator privileges for the desired user group.
      operationId: deleteUserGroup
      tags:
        - group
    patch:
      summary: Edit user groups
      responses:
        '204':
          description: |-
            No Content
            Edited.
        '400':
          description: Bad Request
        '403':
          description: |-
            Forbidden
            You do not have permission to operate user groups.
        '404':
          description: Not Found
        '409':
          description: |-
            Conflict
            A group with the changed group name already exists.
      tags:
        - group
      operationId: editUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserGroupRequest'
        description: ''
      description: |-
        Edit the information for the specified user group.
        You must have administrator privileges for the desired user group.
  '/groups/{groupId}/icon':
    parameters:
      - $ref: '#/components/parameters/groupIdInPath'
    put:
      summary: Change user group icon
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            User group not found.
        '413':
          description: Request Entity Too Large
      operationId: changeUserGroupIcon
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PutUserIconRequest'
            encoding:
              file:
                contentType: 'image/png, image/jpeg, image/gif'
        description: ''
      tags:
        - group
      description: |-
        Change the icon for a user group.
        You must have administrator privileges for the desired user group.
  '/groups/{groupId}/members':
    parameters:
      - $ref: '#/components/parameters/groupIdInPath'
    get:
      summary: Get group members
      tags:
        - group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array of user group members
                items:
                  $ref: '#/components/schemas/UserGroupMember'
        '404':
          description: |-
            Not Found
            User group not found.
      operationId: getUserGroupMembers
      description: Gets the list of members for the specified group.
    post:
      summary: Add group members
      responses:
        '204':
          description: |-
            No Content
            Added.
        '400':
          description: Bad Request
        '403':
          description: |-
            Forbidden
            You do not have permission to operate user groups.
        '404':
          description: |-
            Not Found
            User group not found.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UserGroupMember'
                - $ref: '#/components/schemas/UserGroupMembers'
        description: ''
      tags:
        - group
      operationId: addUserGroupMember
      description: |-
        Adds a member to the specified group.
        You must have administrator privileges for the desired user group.
    delete:
      summary: Delete group members in bulk
      responses:
        '204':
          description: |-
            No Content
            All users have been removed from the group.
        '403':
          description: |-
            Forbidden
            You do not have permission to operate user groups.
        '404':
          description: |-
            Not Found
            User group not found.
      tags:
        - group
      operationId: removeUserGroupMembers
      description: |-
        Removes all members from the specified group.
        You must have administrator privileges for the desired user group.
  '/groups/{groupId}/members/{userId}':
    parameters:
      - $ref: '#/components/parameters/groupIdInPath'
      - $ref: '#/components/parameters/userIdInPath'
    delete:
      summary: Remove group members
      responses:
        '204':
          description: |-
            No Content
            The specified user has been removed from the user group.
        '403':
          description: |-
            Forbidden
            You do not have permission to operate user groups.
        '404':
          description: |-
            Not Found
            User group not found.
      tags:
        - group
      operationId: removeUserGroupMember
      description: |-
        Removes the specified user from the specified user group.
        If you specify a member that has already been removed from the group, a 204 error will be returned.
        You must have administrator privileges for the desired user group.
    patch:
      summary: Edit group members
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: |-
            Bad Request
            User does not exist in group or request is invalid.
        '403':
          description: |-
            Forbidden
            You do not have permission to operate user groups.
        '404':
          description: |-
            Not Found
            User group not found.
      operationId: editUserGroupMember
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchGroupMemberRequest'
      tags:
        - group
      description: |-
        Edits the attributes of the specified user in the specified user group.
        You must have administrator privileges for the desired user group.
  /groups:
    get:
      summary: Get the list of user groups
      tags:
        - group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of user groups
                items:
                  $ref: '#/components/schemas/UserGroup'
      description: Gets the list of user groups.
      operationId: getUserGroups
      parameters: []
    post:
      summary: Create a user group
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '400':
          description: Bad Request
        '403':
          description: |-
            Forbidden
            You do not have permission to create the specified group.
        '409':
          description: |-
            Conflict
            A group with the specified name already exists.
      tags:
        - group
      description: |-
        Create a user group.
        The creator automatically becomes the group admin.
      operationId: createUserGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserGroupRequest'
  /users/me:
    get:
      summary: Get your user details
      tags:
        - me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyUserDetail'
      operationId: getMe
      description: Gets your user details.
    patch:
      summary: Change your user information
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: Bad Request
      tags:
        - me
      operationId: editMe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchMeRequest'
      description: Change your user information.
  '/users/me/oidc':
    get:
      summary: Get my user details (OIDC UserInfo)
      tags:
        - me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCUserInfo'
      operationId: getOIDCUserInfo
      description: |
        Get user details using an OIDC token.
        This is the OIDC UserInfo Endpoint.
  '/users/{userId}/messages':
    parameters:
      - $ref: '#/components/parameters/userIdInPath'
    post:
      summary: Send a direct message
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            User not found.
      tags:
        - message
        - user
      operationId: postDirectMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageRequest'
      description: Sends a direct message to the specified user.
    get:
      summary: Get a list of direct messages
      operationId: getDirectMessages
      tags:
        - message
        - user
      responses:
        '200':
          description: OK
          headers:
            X-TRAQ-MORE:
              $ref: '#/components/headers/X-TRAQ-MORE'
          content:
            application/json:
              schema:
                type: array
                description: An array of messages.
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            User not found.
      parameters:
        - $ref: '#/components/parameters/limitInQuery'
        - $ref: '#/components/parameters/offsetInQuery'
        - $ref: '#/components/parameters/sinceInQuery'
        - $ref: '#/components/parameters/untilInQuery'
        - $ref: '#/components/parameters/inclusiveInQuery'
        - $ref: '#/components/parameters/orderInQuery'
      description: Gets a list of direct messages with a specified user.
  '/users/{userId}/stats':
    parameters:
      - $ref: '#/components/parameters/userIdInPath'
    get:
      summary: Get user statistics
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStats'
        '404':
          description: |-
            Not Found
            User not found.
      operationId: getUserStats
      description: Gets the statistics for the specified user.
  '/channels/{channelId}/subscribers':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    get:
      summary: Get the list of notification subscribers for a channel
      tags:
        - channel
        - notification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of subscriber UUIDs
                items:
                  type: string
                  format: uuid
        '403':
          description: |-
            Forbidden
            Settings for private channels and forced notification channels cannot be retrieved.
        '404':
          description: |-
            Not Found
            Channel not found.
      operationId: getChannelSubscribers
      description: Gets a list of UUIDs of users who are subscribed to notifications for the specified channel.
    patch:
      summary: Edit notification subscribers for a channel
      responses:
        '204':
          description: |-
            No Content
            The change was made.
        '400':
          description: Bad Request
        '403':
          description: |-
            Forbidden
            You cannot change notification subscribers for a specified channel.
        '404':
          description: |-
            Not Found
            Channel not found.
      tags:
        - channel
        - notification
      operationId: editChannelSubscribers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchChannelSubscribersRequest'
        description: ''
      description: |-
        Edits notification subscribers for a specified channel.
        It does not change the notification subscription state of any users you do not include in the request.
        If you specify a user that does not exist, it will be ignored.
    put:
      summary: Sets notification subscribers for a channel
      responses:
        '204':
          description: |-
            No Content
            has been changed.
          headers: {}
        '400':
          description: Bad Request
        '403':
          description: |-
            Forbidden
            You cannot change notification subscribers for a specified channel.
        '404':
          description: |-
            Not Found
            Channel not found.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutChannelSubscribersRequest'
      description: |-
        Sets a notification subscriber for the specified channel.
        Any users not included in the request will have their notification subscription state turned off.
        If you specify a user that does not exist, it will be ignored.
      tags:
        - channel
        - notification
      operationId: setChannelSubscribers
  /users/me/subscriptions:
    get:
      summary: Get your channel subscription status
      tags:
        - me
        - notification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of channel subscription states
                items:
                  $ref: '#/components/schemas/UserSubscribeState'
      operationId: getMyChannelSubscriptions
      description: Gets your channel subscription status.
  '/users/me/subscriptions/{channelId}':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    put:
      summary: Sets the channel subscription level
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: Bad Request
        '403':
          description: |-
            Forbidden
            The notification subscription level for a given channel cannot be changed.
        '404':
          description: |-
            Not Found
            Channel not found.
      tags:
        - me
        - notification
      operationId: setChannelSubscribeLevel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutChannelSubscribeLevelRequest'
      description: Sets the subscription level for the specified channel.
  /webhooks:
    get:
      summary: Gets a list of Webhook information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of webhook information
                items:
                  $ref: '#/components/schemas/Webhook'
      tags:
        - webhook
      operationId: getWebhooks
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: all
          description: Get all webhooks. Permission required.
      description: |-
        Get a list of webhooks.
        If all is not true, returns a list of webhooks owned by you.
    post:
      summary: Create a new Webhook
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad Request
      operationId: createWebhook
      tags:
        - webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWebhookRequest'
      description: |-
        Create a new Webhook.
        If `secret` is an empty string, an insecure webhook will be created.
  '/webhooks/{webhookId}':
    parameters:
      - $ref: '#/components/parameters/webhookIdInPath'
    get:
      summary: Get Webhook information
      tags:
        - webhook
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '404':
          description: |-
            Not Found
            Webhook not found.
      operationId: getWebhook
      description: Gets the details of the specified webhook.
    post:
      summary: Send a webhook
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: postWebhook
      parameters:
        - schema:
            type: string
          in: header
          name: X-TRAQ-Signature
          description: Request body signature (required if Secret is set)
        - schema:
            type: string
          in: header
          name: X-TRAQ- channel-Id
          description: The channel ID to post to (if you want to change it)
        - schema:
            type: integer
            default: 0
          in: query
          name: embed
          description: Specify 1 to automatically embed mentions and channel links.
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              description: The message string.
        description: ''
      tags:
        - webhook
      description: |-
        Post a message to the webhook.
        The `X-TRAQ-Signature` header is required for secure webhooks.
        You can't post to an archived channel.
    delete:
      summary: Delete Webhook
      responses:
        '204':
          description: |-
            No Content
            It has been deleted.
        '404':
          description: |-
            Not Found
            Webhook not found.
      tags:
        - webhook
      operationId: deleteWebhook
      description: |-
        Deletes the specified webhook.
        Messages posted by webhooks are not deleted.
    patch:
      summary: Change Webhook information
      responses:
        '204':
          description: |-
            No Content
            Editing was successful.
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Webhook not found.
      operationId: editWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchWebhookRequest'
      tags:
        - webhook
      description: Changes the description of the specified webhook.
  '/webhooks/{webhookId}/icon':
    parameters:
      - $ref: '#/components/parameters/webhookIdInPath'
    get:
      summary: Get the webhook icon
      tags:
        - webhook
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: |-
            Not Found
            Webhook not found.
      operationId: getWebhookIcon
      description: Gets the icon image for the specified webhook
    put:
      summary: Change webhook icon
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Webhook not found.
        '413':
          description: Request Entity Too Large
      operationId: changeWebhookIcon
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PutUserIconRequest'
            encoding:
              file:
                contentType: 'image/png, image/jpeg, image/gif'
        description: ''
      tags:
        - webhook
      description: Changes the icon image for the specified webhook.
  '/users/{userId}/icon':
    parameters:
      - $ref: '#/components/parameters/userIdInPath'
    get:
      summary: Gets the user's icon image
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: |-
            Not Found
            User not found.
      operationId: getUserIcon
      description: Gets the icon image for the specified user.
    put:
      summary: Changes the user's icon image
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            User not found.
        '413':
          description: Request Entity Too Large
      operationId: changeUserIcon
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PutUserIconRequest'
            encoding:
              file:
                contentType: 'image/png, image/jpeg, image/gif'
      tags:
        - user
      description: |-
        Changes the icon image for the specified user.
        Administrator privileges are required.
  /users/me/icon:
    get:
      summary: Get your icon image
      tags:
        - me
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: |-
            Not Found
            User not found.
      operationId: getMyIcon
      description: Get your icon image.
    put:
      summary: Change your icon image
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: Bad Request
        '413':
          description: Request Entity Too Large
      description: Change your icon image.
      operationId: changeMyIcon
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PutUserIconRequest'
            encoding:
              file:
                contentType: 'image/png, image/jpeg, image/gif'
      tags:
        - me
  /users/me/password:
    put:
      summary: Change your password
      responses:
        '204':
          description: |-
            No Content
            The change was made.
        '400':
          description: Bad Request
        '401':
          description: |-
            Unauthorized
            The current password is incorrect.
      tags:
        - me
      operationId: changeMyPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMyPasswordRequest'
        description: ''
      description: Change your own password.
  '/users/{userId}/password':
    parameters:
      - $ref: '#/components/parameters/userIdInPath'
    put:
      summary: Change a user's password
      responses:
        '204':
          description: |-
            No Content
            The change was made.
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            User not found.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserPasswordRequest'
        description: ''
      tags:
        - user
      operationId: changeUserPassword
      description: |-
        Changes the password for the specified user.
        Administrator privileges are required.
  /users/me/fcm-device:
    post:
      summary: Register an FCM device
      responses:
        '204':
          description: |-
            No Content
            Registration was successful.
        '400':
          description: Bad Request
      tags:
        - me
        - notification
      operationId: registerFCMDevice
      description: Register your own FCM device.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMyFCMDeviceRequest'
  /users/me/view-states:
    get:
      summary: Get a list of your own channel viewing status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Channel viewing state
                items:
                  $ref: '#/components/schemas/MyChannelViewState'
      operationId: getMyViewStates
      tags:
        - me
        - notification
      description: Gets a list of your own channel viewing status.
  /users:
    post:
      summary: Register a user
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '409':
          description: |-
            Conflict
            name is duplicated.
      operationId: createUser
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
        description: ''
      description: |-
        Register the user.
        Administrator privileges are required.
    get:
      summary: Get a list of users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array of user information
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
      operationId: getUsers
      tags:
        - user
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: include-suspended
          description: Whether to retrieve all users, including those with inactive accounts
        - schema:
            type: string
          in: query
          name: name
          description: Retrieve only accounts with a matching name
      description: |-
        Get a list of users.
        If you do not specify `include-suspended`, the response will only include users whose user account state is "1: Enabled".
        `include-suspended` and `name` cannot be specified at the same time.
  /channels:
    post:
      summary: Create a channel
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '409':
          description: |-
            Conflict
            A channel with the specified name already exists.
      operationId: createChannel
      tags:
        - channel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostChannelRequest'
      description: |-
        Create a channel.
        You cannot create a channel with a hierarchy level of 6 or more.
    get:
      summary: Get the channel list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelList'
      operationId: getChannels
      tags:
        - channel
      description: Gets the list of channels.
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: include-dm
          description: Whether to include direct message channels in the response.
        - schema:
            type: string
          in: query
          name: path
          description: Get only channels with matching paths
  '/users/{userId}/tags':
    parameters:
      - $ref: '#/components/parameters/userIdInPath'
    get:
      summary: Get a list of tags for a user
      tags:
        - user
        - user tag
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of user tags
                items:
                  $ref: '#/components/schemas/UserTag'
        '404':
          description: |-
            Not Found
            User not found.
      description: Gets the tag list for the specified user.
      operationId: getUserTags
    post:
      summary: Add a tag to a user
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTag'
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            User not found.
        '409':
          description: |-
            Conflict
            It has already been added.
      tags:
        - user
        - user tag
      operationId: addUserTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserTagRequest'
        description: ''
      description: |-
        Adds the specified tag to the specified user.
        You cannot add tags to a webhook user.
  '/users/{userId}/tags/{tagId}':
    parameters:
      - $ref: '#/components/parameters/userIdInPath'
      - $ref: '#/components/parameters/tagIdInPath'
    patch:
      summary: Edit user's tags
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            User or tag not found.
      operationId: editUserTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserTagRequest'
        description: ''
      tags:
        - user
        - user tag
      description: |-
        Changes the state of the specified tag for the specified user.
        You cannot change someone else's state.
    delete:
      summary: Removes tags from a user
      responses:
        '204':
          description: |-
            No Content
            It has been deleted.
        '403':
          description: |-
            Forbidden
            The tag was locked.
        '404':
          description: |-
            Not Found
            User not found.
      description: Returns 204 if you try to delete a tag that no longer exists.
      operationId: removeUserTag
      tags:
        - user
        - user tag
  '/tags/{tagId}':
    parameters:
      - $ref: '#/components/parameters/tagIdInPath'
    get:
      summary: Get tag information
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '404':
          description: Not Found
      operationId: getTag
      tags:
        - user tag
      description: Gets the description of the specified tag.
  /users/me/tags:
    get:
      summary: Get your tag list
      tags:
        - me
        - user tag
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of user tags
                items:
                  $ref: '#/components/schemas/UserTag'
      operationId: getMyUserTags
      description: Gets an array of tags attached to this item.
    post:
      summary: Add a tag to yourself
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTag'
        '400':
          description: Bad Request
        '409':
          description: |-
            Conflict
            It has already been added.
      tags:
        - me
        - user tag
      operationId: addMyUserTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserTagRequest'
        description: ''
      description: Add a new tag to yourself.
  '/users/me/tags/{tagId}':
    parameters:
      - $ref: '#/components/parameters/tagIdInPath'
    delete:
      summary: Remove tag from yourself
      responses:
        '204':
          description: |-
            No Content
            It has been deleted.
        '403':
          description: |-
            Forbidden
            The tag is locked.
      description: Returns 204 if you try to delete a tag that no longer exists.
      operationId: removeMyUserTag
      tags:
        - user tag
        - me
    patch:
      summary: Edit your tags
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Tag not found.
      operationId: editMyUserTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserTagRequest'
        description: ''
      tags:
        - user tag
        - me
      description: Changes the state of the tag you specify.
  /users/me/stars:
    get:
      summary: Get star channel list
      tags:
        - me
        - star
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of UUIDs of channels you're starring
                items:
                  type: string
                  format: uuid
      operationId: getMyStars
      description: Gets an array of UUIDs of channels you're starred in.
    post:
      summary: Add channel to star
      responses:
        '204':
          description: |-
            No Content
            I starred.
        '400':
          description: Bad Request
      tags:
        - me
        - star
      operationId: addMyStar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostStarRequest'
      description: |-
        Adds the specified channel to the star channel.
        If you specify a starred channel ID, it will return 204.
        If an invalid channel ID is specified, a 400 will be returned.
  '/users/me/stars/{channelId}':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    delete:
      summary: Removes the channel from the star
      responses:
        '204':
          description: |-
            No Content
            It has been deleted.
      tags:
        - me
        - star
      description: Returns 204 if a channel has already been removed from the star list.
      operationId: removeMyStar
  /users/me/unread:
    get:
      summary: Get unread channels
      tags:
        - me
        - notification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array of unread channel information
                items:
                  $ref: '#/components/schemas/UnreadChannel'
      operationId: getMyUnreadChannels
      description: Gets the unread info for channels you currently have unread.
  /version:
    get:
      summary: Get the version
      tags:
        - public
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
      operationId: getServerVersion
      description: Gets the server version and server flag information.
  /login:
    post:
      summary: Login
      responses:
        '204':
          description: |-
            No Content
            You are logged in.
        '302':
          description: |-
            Found
            You're logged in. Redirecting you.
        '400':
          description: Bad Request
        '401':
          description: |-
            Unauthorized
            Your credentials are incorrect.
        '403':
          description: |-
            Forbidden
            There is a problem with the user account you are trying to log in as.
      tags:
        - authentication
      operationId: login
      parameters:
        - $ref: '#/components/parameters/redirectInQuery'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostLoginRequest'
      description: Log in.
  /logout:
    post:
      summary: Logout
      responses:
        '204':
          description: |-
            No Content
            You have been logged out.
        '302':
          description: |-
            Found
            You have been logged out. Redirecting you.
      tags:
        - authentication
      operationId: logout
      parameters:
        - $ref: '#/components/parameters/redirectInQuery'
        - schema:
            type: boolean
            default: false
          in: query
          name: all
          description: Whether to log out for all sessions
      description: You will now be logged out.
  /users/me/sessions:
    get:
      summary: Get a list of your login sessions
      tags:
        - authentication
        - me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of valid login sessions.
                items:
                  $ref: '#/components/schemas/LoginSession'
      operationId: getMySessions
      description: Get a list of your login sessions.
  '/users/me/sessions/{sessionId}':
    parameters:
      - $ref: '#/components/parameters/sessionIdInPath'
    delete:
      summary: Invalidate the session
      responses:
        '204':
          description: |-
            No Content
            It has been disabled.
      operationId: revokeMySession
      tags:
        - authentication
        - me
      description: |-
        Invalidates (logs out) the specified user's session.
        If you specify a session that no longer exists or is invalid, `204` will be returned.
  /activity/timeline:
    get:
      summary: Get the activity timeline
      tags:
        - activity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of messages.
                items:
                  $ref: '#/components/schemas/ActivityTimelineMessage'
        '400':
          description: Bad Request
      description: |-
        Get the most recently posted messages in public channels, sorted by creation date in descending order.
        If `all` is not `true`, you will get the timeline of only your subscribed channels.
      parameters:
        - schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 50
          in: query
          name: limit
          description: Number of items to retrieve
        - schema:
            type: boolean
            default: false
          in: query
          name: all
          description: Gets the timeline of all channels
        - schema:
            type: boolean
            default: false
          in: query
          name: per_channel
          description: Whether to retrieve only the most recent messages from the same channel
      operationId: getActivityTimeline
  /ws:
    get:
      summary: Connect to the WebSocket notification stream
      tags:
        - notification
      responses:
        '101':
          description: Switching Protocols
      operationId: ws
      description: |-
        # WebSocket protocol
        ## send
        You can configure this WebSocket session by sending a TextMessage in the format `command:argument1:argument2:...` to the server.
        ### `viewstate` command
        Sets the channel this WebSocket session is listening on (the channel on which it will receive events).
        Currently, only one channel can be set per session.

        `viewstate:{channel id}:{view state}`
        + Channel ID: Target channel ID
        + Viewing state: `none`, `monitoring`, `editing`

        Before sending the first `viewstate` command, or after sending `viewstate:null`, `viewstate:`, this session will not be watching any channel.

        ### `rtcstate` command
        Change your WebRTC state.
        If another connection already holds the state, it cannot be changed.

        `rtcstate:{channel id}:({state}:{session id})*`

        If the connection is dropped, your WebRTC state is reset.

        ### `timeline_streaming` command
        Specifies whether to receive `MESSAGE_CREATED` events for all public channels.
        The initial state is `off`.

        `timeline_streaming:(on|off|true|false)`

        ## Reception
        Various events are sent asynchronously as TextMessage with a `type` and `body` as JSON.

        example:
        ```json
        {"type":"USER_ONLINE","body":{"id":"7dd8e07f-7f5d-4331-9176-b56a4299768b"}}
        ```

        Events list

        ### `USER_JOINED`
        A new user has been registered.

        Target audience: Everyone

        + `id`: The registered user's Id

        ### `USER_UPDATED`
        The user's information has been updated.

        Target audience: Everyone

        + `id`: The Id of the user whose information was updated

        ### `USER_TAGS_UPDATED`
        A user's tags were updated.

        Target audience: Everyone

        + `id`: The Id of the user whose tag was updated
        + `tag_id`: The Id of the updated tag.

        ### `USER_ICON_UPDATED`
        Updated user icons.

        Target audience: Everyone

        + `id`: The Id of the user whose icon was updated

        ### `USER_WEBRTC_STATE_CHANGED`
        The user's WebRTC state has changed

        Target audience: Everyone

        + `user_id`: The ID of the user who made the change
        + `channel_id`: The Id of the channel the user is connected to after changing
        + `sessions`: The user's changed state (array)
          + `state`: State
          + `sessionId`: Session ID

        ### `USER_VIEWSTATE_CHANGED`
        A user's channel viewing state has changed

        Target: All WS sessions of the user, including changed WS sessions

        + `view_states`: The changed state of the user, including the changed WS session (array).
          + `key`: WS session identifier
          + `channel_id`: The channel Id being viewed
          + `state`: Viewing state

        ### `USER_ONLINE`
        A user comes online.

        Target audience: Everyone

        + `id`: The Id of the user who came online

        ### `USER_OFFLINE`
        The user went offline.

        Target audience: Everyone

        + `id`: The Id of the user who went offline

        ### `USER_GROUP_CREATED`
        A user group was created

        Target audience: Everyone

        + `id`: The Id of the created user group

        ### `USER_GROUP_UPDATED`
        A user group was updated

        Target audience: Everyone

        + `id`: The Id of the created user group

        ### `USER_GROUP_DELETED`
        A user group was deleted

        Target audience: Everyone

        + `id`: The Id of the user group that was deleted.

        ### `CHANNEL_CREATED`
        A new channel was created.

        Target: Everyone who can view the channel

        + `id`: The Id of the created channel
        + ` dm_user_id`: (DM only) User ID of the person you are DMing

        ### `CHANNEL_UPDATED`
        The channel information has changed.

        Target: Everyone who can view the channel

        + `id`: The Id of the channel where the change occurred
        + `dm_user_id`: (DM only) User ID of the person you are DMing

        ### `CHANNEL_DELETED`
        The channel was deleted.

        Target: Everyone who can view the channel

        + `id`: The Id of the deleted channel
        + `dm_user_id`: (DM only) User ID of the person you are DMing

        ### `CHANNEL_STARED`
        I started the channel.

        Target: Self

        + `id`: The Id of the channel you starred

        ### `CHANNEL_UNSTARED`
        You unstarred a channel.

        Target: Self

        + `id`: The Id of the channel you starred

        ### `CHANNEL_VIEWERS_CHANGED`
        The channel's viewership has changed.

        Target: Users viewing the channel

        + `id`: The Id of the channel that changed
        + `viewers`: Viewers after the change (array)
          + `userId`: User Id
          + `state`: Viewing state
          + `updatedAt`: The date and time when the viewing status was updated

        ### `CHANNEL_SUBSCRIBERS_CHANGED`
        The channel's subscribers have changed.

        Target: Users viewing the channel

        + `id`: The Id of the channel that changed

        ### `MESSAGE_CREATED`
        A message was posted.

        Target: Users viewing the posting channel, Users with notifications set for the posting channel, Users who have been mentioned

        + `id`: The Id of the posted message.
        + `is_citing`: Whether the posted message quotes a post from the user with the WebSocket connection

        ### `MESSAGE_UPDATED`
        The message has been updated.

        Target: Users viewing the posting channel

        + `id`: The Id of the updated message.

        ### `MESSAGE_DELETED`
        The message was deleted.

        Target: Users viewing the posting channel

        + `id`: The Id of the deleted message.

        ### `MESSAGE_STAMPED`
        The message was stamped.

        Target: Users viewing the posting channel

        + `message_id`: Message ID
        + `user_id`: The ID of the user who stamped the stamp
        + `stamp_id`: Stamp ID
        + `count`: The number of times the user pressed
        + `created_at`: The date and time when the user first applied the stamp to a message.

        ### `MESSAGE_UNSTAMPED`
        The stamp has been removed from the message.

        Target: Users viewing the posting channel

        + `message_id`: Message ID
        + `user_id`: The ID of the user who stamped the stamp
        + `stamp_id`: Stamp ID

        ### `MESSAGE_PINNED`
        The message was pinned.

        Target: Users viewing the posting channel

        + `message_id`: The ID of the pinned message.
        + `channel_id`: The channel ID of the pinned message.

        ### `MESSAGE_UNPINNED`
        A pinned message was unpinned.

        Target: Users viewing the posting channel

        + `message_id`: The ID of the message that was unpinned.
        + `channel_id`: The channel ID of the unpinned message

        ### `MESSAGE_READ`
        I read a message on a channel.

        Target: Self

        + `id`: The channel ID to read

        ### `STAMP_CREATED`
        New stamps have been added.

        Target audience: Everyone

        + `id`: The Id of the created stamp

        ### `STAMP_UPDATED`
        The stamp has been corrected.

        Target audience: Everyone

        + `id`: The Id of the modified stamp

        ### `STAMP_DELETED`
        The stamp has been removed.

        Target audience: Everyone

        + `id`: The id of the stamp that was deleted.

        ### `STAMP_PALETTE_CREATED`
        A new stamp palette has been added.

        Target: Self

        + `id`: The Id of the created stamp palette

        ### `STAMP_PALETTE_UPDATED`
        The Stamps palette has been revised.

        Target: Self

        + `id`: Id of the modified stamp palette

        ### `STAMP_PALETTE_DELETED`
        The Stamps palette has been removed.

        Target: Self

        + `id`: The Id of the stamp palette that was deleted

        ### `CLIP_FOLDER_CREATED`
        The clip folder has been created.

        Target: Self

        + `id`: The Id of the created clip folder

        ### `CLIP_FOLDER_UPDATED`
        The clip folder has been fixed.

        Target: Self

        + `id`: The Id of the updated clip folder

        ### `CLIP_FOLDER_DELETED`
        The clip folder has been deleted.

        Target: Self

        + `id`: The Id of the clip folder that was deleted

        ### `CLIP_FOLDER_MESSAGE_DELETED`
        A message was removed from the clip folder.

        Target: Self

        + `folder_id`: The Id of the clip folder the message was excluded from
        + `message_id`: The Id of the message that was removed from the clip folder

        ### `CLIP_FOLDER_MESSAGE_ADDED`
        A message has been added to the clip folder.

        Target: Self

        + `folder_id`: The Id of the clip folder to which the message was added
        + `message_id`: The Id of the message added to the clip folder
  /users/me/tokens:
    get:
      summary: Get a list of valid tokens
      tags:
        - oauth2
        - me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of token information
                items:
                  $ref: '#/components/schemas/ActiveOAuth2Token'
      operationId: getMyTokens
      description: Gets a list of valid self-issued OAuth2 tokens.
  '/users/me/tokens/{tokenId}':
    parameters:
      - $ref: '#/components/parameters/tokenIdInPath'
    delete:
      summary: Revokes authorization for a token
      responses:
        '204':
          description: |-
            No Content
            It has been canceled.
        '404':
          description: Not Found
      operationId: revokeMyToken
      description: Revokes the authorization of the specified token.
      tags:
        - oauth2
        - me
  '/public/icon/{username}':
    parameters:
      - name: username
        in: path
        required: true
        description: Username
        schema:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
    get:
      summary: Gets the user's icon image
      tags:
        - public
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: Not Found
      operationId: getPublicUserIcon
      description: Gets the icon image of the user.
  '/clients/{clientId}':
    parameters:
      - $ref: '#/components/parameters/clientIdInPath'
    get:
      summary: Get OAuth2 client information
      tags:
        - oauth2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/OAuth2Client'
                  - $ref: '#/components/schemas/OAuth2ClientDetail'
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: getClient
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: detail
          description: Whether to include detailed information
      description: |-
        Gets information about the specified OAuth2 client.
        To obtain detailed information, you must have administrative privileges for the target client.
    delete:
      summary: Remove OAuth2 client
      responses:
        '204':
          description: |-
            No Content
            It has been deleted.
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            OAuth2 client not found.
      description: |-
        Deletes the specified OAuth2 client.
        You must have administrative privileges for the client. If the deletion is successful, all authorizations for this client will be revoked.
      operationId: deleteClient
      tags:
        - oauth2
    patch:
      summary: Change OAuth2 client information
      responses:
        '204':
          description: |-
            No Content
            The change was made.
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            OAuth2 client not found.
      tags:
        - oauth2
      operationId: editClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchClientRequest'
        description: ''
      description: |-
        Changes the information of the specified OAuth2 client.
        You must have administrative privileges for the target client.
        If you change the client developer UUID, client management privileges will be transferred to the new user and you will lose your own privileges.
  '/clients/{clientId}/tokens':
    delete:
      summary: Delete the OAuth client token
      parameters:
        - $ref: '#/components/parameters/clientIdInPath'
      responses:
        '204':
          description: |-
            No Content
            It was deleted successfully.
        '404':
          description: |-
            Not Found
            OAuth2 client not found.
      tags:
        - oauth2
      operationId: revokeClientTokens
      description: |-
        Revokes all access tokens for the specified OAuth client that you have authorized.
  /clients:
    get:
      summary: Get a list of OAuth2 clients
      tags:
        - oauth2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array of OAuth2 client information
                items:
                  $ref: '#/components/schemas/OAuth2Client'
      operationId: getClients
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: all
          description: Whether to get all clients
      description: |-
        Get a list of OAuth2 clients for which you are a developer.
        If `all` is `true`, it returns a list of all clients for all developers.
    post:
      summary: Create an OAuth2 client
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ClientDetail'
        '400':
          description: Bad Request
      tags:
        - oauth2
      operationId: createClient
      description: Creates an OAuth2 client.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClientRequest'
  /bots:
    post:
      summary: Create a BOT
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDetail'
        '400':
          description: Bad Request
        '409':
          description: |-
            Conflict
            The name is already in use.
      operationId: createBot
      description: |-
        Create a BOT.
        Once created, you need to configure the subscription events.
        Additionally, activation is required for HTTP Mode.
      tags:
        - bot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBotRequest'
    get:
      summary: Get the BOT list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array of bot information
                items:
                  $ref: '#/components/schemas/Bot'
      operationId: getBots
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: all
          description: Whether to get all bots
      tags:
        - bot
      description: |-
        Get a list of BOT information.
        If you do not specify all, only bots that you are the developer of will be returned.
  /bots/ws:
    get:
      tags:
        - bot
      responses:
        '101':
          description: Switching Protocols
      operationId: connectBotWS
      summary: Connect to the notification stream for WebSocket Mode BOT
      description: |-
        # BOT WebSocket protocol

        ## send

        You can configure this WebSocket session by sending a TextMessage in the format `command:argument1:argument2:...` to the server.

        ### `rtcstate` command
        Change your WebRTC state.
        If another connection already holds the state, it cannot be changed.

        `rtcstate:{channel id}:({state}:{session id})*`

        If you specify a null or empty string for the channel ID or a null or empty string for the state, the WebRTC state will be reset.

        `rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`

        If the connection is dropped, your WebRTC state is reset.

        ## Reception

        Various events are sent asynchronously as TextMessage with `type`, `reqId` and `body` as JSON.
        The content of `body` is the same as the Request Body in HTTP Mode.
        The exception is that `ERROR` events do not have a `reqId`.

        Example: PING event
        `{"type":"PING","reqId":"requestId","body":{"eventTime":"2019-05-07T04:50:48.582586882Z"}}`

        ### `ERROR`

        Sent when a command could not be accepted due to invalid command arguments or other reasons.
        Note that since they are sent asynchronously, their correspondence with commands cannot be guaranteed.
        In a production environment it is advisable to not send ERROR messages.

        `{"type":"ERROR","body":"message"}`

  '/bots/{botId}/icon':
    parameters:
      - $ref: '#/components/parameters/botIdInPath'
    get:
      summary: Get the BOT icon image
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        '404':
          description: |-
            Not Found
            BOT not found.
      operationId: getBotIcon
      tags:
        - bot
      description: Gets the icon image of the specified BOT.
    put:
      summary: Change the BOT icon image
      responses:
        '204':
          description: |-
            No Content
            has been changed.
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            BOT not found.
        '413':
          description: Request Entity Too Large
      operationId: changeBotIcon
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PutUserIconRequest'
            encoding:
              file:
                contentType: 'image/png, image/jpeg, image/gif'
      tags:
        - bot
      description: |-
        Change the icon image of the specified BOT.
        You must have administrative privileges for the target BOT.
  '/bots/{botId}':
    parameters:
      - $ref: '#/components/parameters/botIdInPath'
    get:
      summary: Get BOT information
      tags:
        - bot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Bot'
                  - $ref: '#/components/schemas/BotDetail'
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: getBot
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: detail
          description: Whether to include detailed information
      description: |-
        Gets the bot information for the specified bot.
        To obtain detailed BOT information, you must have administrative permissions for the target BOT.
    delete:
      summary: Remove BOT
      responses:
        '204':
          description: |-
            No Content
            It has been deleted.
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: deleteBot
      tags:
        - bot
      description: |-
        Deletes the specified bot.
        You must have administrative privileges for the target BOT.
    patch:
      summary: Change BOT information
      responses:
        '204':
          description: |-
            No Content
            Changed.
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: editBot
      description: |-
        Change the information of the specified BOT.
        You must have administrative privileges for the target BOT.
        If you change the BOT developer UUID, the BOT management authority will be transferred to the new user and you will lose the authority.
      tags:
        - bot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBotRequest'
        description: ''
  '/bots/{botId}/actions/activate':
    parameters:
      - $ref: '#/components/parameters/botIdInPath'
    post:
      summary: Activate the BOT
      responses:
        '202':
          description: Accepted
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            BOT not found.
      operationId: activateBot
      tags:
        - bot
      description: |-
        Enables the specified bot.
        You must have administrative privileges for the target BOT.
  '/bots/{botId}/actions/inactivate':
    parameters:
      - $ref: '#/components/parameters/botIdInPath'
    post:
      summary: Deactivate the BOT
      responses:
        '204':
          description: |-
            No Content
            The bot has been deactivated.
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            BOT not found.
      tags:
        - bot
      operationId: inactivateBot
      description: Disables the specified bot. Admin permissions for the target bot are required.
  '/bots/{botId}/actions/reissue':
    parameters:
      - $ref: '#/components/parameters/botIdInPath'
    post:
      summary: Reissue BOT tokens
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotTokens'
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            BOT not found.
      operationId: reissueBot
      tags:
        - bot
      description: |-
        The current tokens of the specified BOT will be invalidated and reissued.
        You must have administrative privileges for the target BOT.
  '/bots/{botId}/logs':
    parameters:
      - $ref: '#/components/parameters/botIdInPath'
    get:
      summary: Get BOT event log
      tags:
        - bot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of event logs
                items:
                  $ref: '#/components/schemas/BotEventLog'
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            BOT not found.
      operationId: getBotLogs
      parameters:
        - $ref: '#/components/parameters/limitInQuery'
        - $ref: '#/components/parameters/offsetInQuery'
      description: |-
        Gets the event log of the specified BOT.
        You must have administrative privileges for the target BOT.
  '/bots/{botId}/actions/join':
    parameters:
      - $ref: '#/components/parameters/botIdInPath'
    post:
      summary: Add a bot to a channel
      responses:
        '204':
          description: |-
            No Content
            I have added a bot to the team.
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            BOT not found.
      description: |-
        Makes the specified bot join the specified channel.
        BOTs that join a channel will receive various events from that channel.
        You must have administrative privileges for the target BOT.
      operationId: letBotJoinChannel
      tags:
        - bot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBotActionJoinRequest'
  '/bots/{botId}/actions/leave':
    parameters:
      - $ref: '#/components/parameters/botIdInPath'
    post:
      summary: kicks a bot out of a channel
      responses:
        '204':
          description: |-
            No Content
            The bot has been dismissed.
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: |-
            Not Found
            BOT not found.
      tags:
        - bot
      operationId: letBotLeaveChannel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBotActionLeaveRequest'
      description: |-
        This will kick the specified bot out of the specified channel.
        You must have administrative privileges for the target BOT.
  '/channels/{channelId}/bots':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    get:
      summary: Get a list of bots currently participating in a channel
      tags:
        - bot
        - channel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array of bots
                items:
                  $ref: '#/components/schemas/BotUser'
        '404':
          description: |-
            Not Found
            Channel not found.
      operationId: getChannelBots
      description: Gets a list of bots that are part of a specified channel.
  /webrtc/authenticate:
    post:
      summary: Authentication API for Skyway
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebRTCAuthenticateResult'
        '400':
          description: Bad Request
        '503':
          description: |-
            Service Unavailable
            WebRTC is currently not working
      description: Authentication API for Skyway WebRTC
      operationId: postWebRTCAuthenticate
      tags:
        - WebRTC
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWebRTCAuthenticateRequest'
  '/channels/{channelId}':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    get:
      summary: Get channel information
      tags:
        - channel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '404':
          description: Not Found
      operationId: getChannel
      description: Gets information about the specified channel.
    patch:
      summary: Change channel information
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: |-
            Conflict
            A channel with the changed name already exists.
      operationId: editChannel
      tags:
        - channel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchChannelRequest'
      description: |-
        Changes the information for the specified channel.
        Changes require permission.
        If you want to move it to the root channel, specify `00000000-0000-0000-0000-000000000000` as `parent`.
  /webrtc/state:
    get:
      summary: Get WebRTC status
      tags:
        - WebRTC
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebRTCUserStates'
      operationId: getWebRTCState
      description: Gets the current WebRTC state.
  /clip-folders:
    post:
      summary: Create a clip folder
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClipFolder'
        '400':
          description: Bad Request
      operationId: createClipFolder
      tags:
        - clip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClipFolderRequest'
      description: |-
        Create a clip folder.
        It is possible to create a folder with the same name as an existing folder.
    get:
      summary: Get a list of clip folders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of clip folders
                items:
                  $ref: '#/components/schemas/ClipFolder'
      tags:
        - clip
      operationId: getClipFolders
      parameters: []
      description: Gets a list of clip folders that you own.
  '/clip-folders/{folderId}':
    parameters:
      - $ref: '#/components/parameters/folderIdInPath'
    get:
      summary: Get clip folder information
      tags:
        - clip
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClipFolder'
        '404':
          description: |-
            Not Found
            Clip folder not found.
      operationId: getClipFolder
      description: Gets information about the specified clip folder.
    delete:
      summary: Delete the clip folder
      responses:
        '204':
          description: |-
            No Content
            It has been deleted.
        '404':
          description: |-
            Not Found
            Clip folder not found.
      operationId: deleteClipFolder
      tags:
        - clip
      description: Deletes the specified clip folder.
    patch:
      summary: Edit clip folder information
      responses:
        '204':
          description: |-
            No Content
            Edited.
        '400':
          description: Bad Request
        '404':
          description: Not Found
      operationId: editClipFolder
      tags:
        - clip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchClipFolderRequest'
      description: Edits the information about the specified clip folder.
  '/clip-folders/{folderId}/messages':
    parameters:
      - $ref: '#/components/parameters/folderIdInPath'
    post:
      summary: Add message to clip folder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClippedMessage'
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Clip folder not found.
        '409':
          description: |-
            Conflict
            It has already been added.
      operationId: clipMessage
      tags:
        - clip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostClipFolderMessageRequest'
      description: Adds the specified message to the specified clip folder.
    get:
      summary: Get a list of clips in a folder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of clips
                items:
                  $ref: '#/components/schemas/ClippedMessage'
        '404':
          description: |-
            Not Found
            Clip folder not found.
      operationId: getClips
      parameters:
        - $ref: '#/components/parameters/limitInQuery'
        - $ref: '#/components/parameters/offsetInQuery'
        - $ref: '#/components/parameters/orderInQuery'
      tags:
        - clip
      description: |-
        Gets a list of clips in a specified folder.
        If you do not specify `order`, the clips will be returned in order of most recent clipping date.
  '/clip-folders/{folderId}/messages/{messageId}':
    parameters:
      - $ref: '#/components/parameters/folderIdInPath'
      - $ref: '#/components/parameters/messageIdInPath'
    delete:
      summary: Exclude messages from clip folder
      responses:
        '204':
          description: |-
            No Content
            It came off.
        '404':
          description: |-
            Not Found
            Clip folder not found.
      operationId: unclipMessage
      description: |-
        Excludes clipping of the specified message from the specified folder.
        If a message has already been removed, a 204 will be returned.
      tags:
        - clip
  '/webhooks/{webhookId}/messages':
    parameters:
      - $ref: '#/components/parameters/webhookIdInPath'
    get:
      summary: Get a list of Webhook post messages
      tags:
        - webhook
      operationId: getWebhookMessages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of messages.
                items:
                  $ref: '#/components/schemas/Message'
          headers:
            X-TRAQ-MORE:
              $ref: '#/components/headers/X-TRAQ-MORE'
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Webhook not found.
      parameters:
        - $ref: '#/components/parameters/limitInQuery'
        - $ref: '#/components/parameters/offsetInQuery'
        - $ref: '#/components/parameters/sinceInQuery'
        - $ref: '#/components/parameters/untilInQuery'
        - $ref: '#/components/parameters/inclusiveInQuery'
        - $ref: '#/components/parameters/orderInQuery'
      description: Returns a list of messages posted by the specified webhook.
  '/channels/{channelId}/events':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    get:
      summary: Get a list of channel events
      tags:
        - channel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of channel events.
                items:
                  $ref: '#/components/schemas/ChannelEvent'
          headers:
            X-TRAQ-MORE:
              $ref: '#/components/headers/X-TRAQ-MORE'
        '400':
          description: Bad Request
        '404':
          description: |-
            Not Found
            Channel not found.
      operationId: getChannelEvents
      parameters:
        - $ref: '#/components/parameters/limitInQuery'
        - $ref: '#/components/parameters/offsetInQuery'
        - $ref: '#/components/parameters/sinceInQuery'
        - $ref: '#/components/parameters/untilInQuery'
        - $ref: '#/components/parameters/inclusiveInQuery'
        - $ref: '#/components/parameters/orderInQuery'
      description: Gets the event list for the specified channel.
  /stamp-palettes:
    get:
      summary: Get the list of stamp palettes
      tags:
        - stamp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Stamp palette arrangement
                items:
                  $ref: '#/components/schemas/StampPalette'
      operationId: getStampPalettes
      description: Gets a list of stamp palettes that you own.
    post:
      summary: Create a stamp palette
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StampPalette'
        '400':
          description: Bad Request
      tags:
        - stamp
      description: Creates a stamp palette.
      operationId: createStampPalette
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostStampPaletteRequest'
  '/stamp-palettes/{paletteId}':
    parameters:
      - $ref: '#/components/parameters/paletteIdInPath'
    get:
      summary: Get the stamp palette
      tags:
        - stamp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StampPalette'
        '404':
          description: Not Found
      operationId: getStampPalette
      description: Gets the description of the specified stamp palette.
    delete:
      summary: Removed the stamp palette
      responses:
        '204':
          description: |-
            No Content
            It has been deleted.
        '403':
          description: |-
            Forbidden
            You do not have permission to delete the target stamp palette.
        '404':
          description: Not Found
      operationId: deleteStampPalette
      description: |-
        Deletes the specified stamp palette.
        You must have administrative privileges for the relevant stamp palette.
      tags:
        - stamp
    patch:
      summary: Edit the stamp palette
      responses:
        '204':
          description: |-
            No Content
            Changed.
        '400':
          description: Bad Request
        '403':
          description: |-
            Forbidden
            You do not have permission to edit the target stamp palette.
        '404':
          description: Not Found
      operationId: editStampPalette
      tags:
        - stamp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchStampPaletteRequest'
      description: |-
        Edit the specified stamp palette.
        The order of the stamps in the request is preserved and changed.
        You must have administrative privileges for the relevant stamp palette.
  /activity/onlines:
    get:
      summary: Get the list of online users
      tags:
        - activity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of user UUIDs.
                items:
                  type: string
      operationId: getOnlineUsers
      description: Returns a list of UUIDs of users who are currently online (SSE or WS connected).
  '/stamps/{stampId}/image':
    parameters:
      - $ref: '#/components/parameters/stampIdInPath'
    get:
      summary: Get stamp image
      tags:
        - stamp
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        '404':
          description: Not Found
      operationId: getStampImage
      description: Returns the stamp image for the specified ID.
    put:
      summary: Change stamp image
      operationId: changeStampImage
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '413':
          description: Request Entity Too Large
      tags:
        - stamp
      description: Changes the image of the specified stamp.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              format: binary
              properties:
                file:
                  type: string
                  format: binary
                  description: 'Stamp image (png, jpeg, gif up to 1MB)'
              required:
                - file
        description: ''
  '/users/me/unread/{channelId}':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    delete:
      summary: Mark the channel as read
      operationId: readChannel
      responses:
        '204':
          description: |-
            No Content
            I have marked it as read.
      description: Marks channels you have not read as read.
      tags:
        - me
        - notification
  '/groups/{groupId}/admins/{userId}':
    parameters:
      - $ref: '#/components/parameters/groupIdInPath'
      - $ref: '#/components/parameters/userIdInPath'
    delete:
      summary: Remove group admin
      responses:
        '204':
          description: |-
            No Content
            The specified user has been removed from the User Group Administrator list.
        '400':
          description: Bad Request
        '403':
          description: |-
            Forbidden
            You do not have permission to operate user groups.
        '404':
          description: |-
            Not Found
            User group not found.
      tags:
        - group
      operationId: removeUserGroupAdmin
      description: |-
        Removes the specified administrator from the specified user group.
        You must have administrator privileges for the desired user group.
        If the administrator is no longer in the group, a 400 error will be returned.
  '/groups/{groupId}/admins':
    parameters:
      - $ref: '#/components/parameters/groupIdInPath'
    post:
      summary: Add group admin
      responses:
        '204':
          description: |-
            No Content
            Added.
        '400':
          description: Bad Request
        '403':
          description: |-
            Forbidden
            You do not have permission to operate user groups.
        '404':
          description: |-
            Not Found
            User group not found.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserGroupAdminRequest'
        description: ''
      tags:
        - group
      operationId: addUserGroupAdmin
      description: |-
        Adds the administrator to the specified group.
        You must have administrator privileges for the desired user group.
    get:
      summary: Get group admin
      tags:
        - group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: An array of UUIDs of user group administrators
                items:
                  type: string
                  format: uuid
        '404':
          description: |-
            Not Found
            User group not found.
      operationId: getUserGroupAdmins
      description: Gets the list of administrators for the specified group.
  /oauth2/token:
    post:
      tags:
        - oauth2
      operationId: postOAuth2Token
      description: The OAuth2 token endpoint.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostOAuth2Token'
      responses:
        '200':
          description: The token was issued successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Token'
        '400':
          description: Token issuance failed.
        '403':
          description: Token issuance failed.
      summary: OAuth2 token endpoint
  /oauth2/authorize/decide:
    post:
      tags:
        - oauth2
      operationId: postOAuth2AuthorizeDecide
      description: OAuth2 authorization consent
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuth2Decide'
      responses:
        '302':
          description: Redirects the results to the RedirectURI.
        '400':
          description: The request is invalid.
        '403':
          description: The request is not allowed.
      summary: OAuth2 authorization consent API
  /oauth2/authorize:
    get:
      tags:
        - oauth2
      operationId: getOAuth2Authorize
      description: OAuth2 Authorization Endpoint
      parameters:
        - name: response_type
          in: query
          schema:
            $ref: '#/components/schemas/OAuth2ResponseType'
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          schema:
            type: string
        - name: scope
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: code_challenge
          in: query
          schema:
            type: string
        - name: code_challenge_method
          in: query
          schema:
            type: string
        - name: nonce
          in: query
          schema:
            type: string
        - name: prompt
          in: query
          schema:
            $ref: '#/components/schemas/OAuth2Prompt'
      responses:
        '302':
          description: Redirect depending on the result.
        '400':
          description: The request is invalid.
        '403':
          description: The request is not allowed.
      summary: OAuth2 Authorization Endpoint
    post:
      tags:
        - oauth2
      operationId: postOAuth2Authorize
      description: OAuth2 Authorization Endpoint
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuth2Authorization'
      responses:
        '302':
          description: Redirect depending on the result.
        '400':
          description: The request is invalid.
        '403':
          description: The request is not allowed.
      summary: OAuth2 Authorization Endpoint
  /oauth2/revoke:
    post:
      summary: OAuth2 token revocation endpoint
      operationId: revokeOAuth2Token
      responses:
        '200':
          description: OK
      description: OAuth2 token revocation endpoint
      tags:
        - oauth2
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuth2Revoke'
  /users/me/ex-accounts:
    get:
      summary: Get a list of external login accounts
      tags:
        - authentication
        - me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array of associated accounts
                items:
                  $ref: '#/components/schemas/ExternalProviderUser'
      operationId: getMyExternalAccounts
      description: Gets a list of external login accounts associated with you.
    parameters: []
  /users/me/ex-accounts/link:
    post:
      summary: Link an external login account
      operationId: linkExternalAccount
      responses:
        '302':
          description: |-
            Found
            You will be redirected to the authentication screen for the external service.
        '400':
          description: Bad Request
      tags:
        - authentication
        - me
      description: |-
        Link an external login account to yourself.
        The specified `providerName` must be valid on the server side.
        If the request is accepted, you will be redirected to the external service's authentication page and will need to be authenticated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostLinkExternalAccount'
  /users/me/ex-accounts/unlink:
    post:
      summary: Unlink external login account
      operationId: unlinkExternalAccount
      responses:
        '204':
          description: |-
            No Content
            The link has been removed.
        '400':
          description: Bad Request
      description: Unbinds any external login account associated with you.
      tags:
        - authentication
        - me
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUnlinkExternalAccount'
  '/users/{userId}/dm- channel':
    parameters:
      - schema:
          type: string
          format: uuid
        name: userId
        in: path
        required: true
    get:
      summary: Get DM channel information
      tags:
        - user
        - channel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DMChannel'
        '404':
          description: |
            Not Found
            User not found.
      operationId: getUserDMChannel
      description: |-
        Returns information about direct message channels with a specified user.
        If a direct message channel doesn't exist, one will be created automatically.
  '/messages/{messageId}/clips':
    parameters:
      - $ref: '#/components/parameters/messageIdInPath'
    get:
      summary: Get your clips
      tags:
        - message
        - clip
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageClip'
        '404':
          description: |
            Not Found
      operationId: getMessageClips
      description: Returns a list of your clips for this message.
  /ogp:
    get:
      summary: Get OGP information
      tags:
        - ogp
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ogp'
        '400':
          description: The specified URL is invalid.
      operationId: getOgp
      description: |
        Gets the OGP information for the specified URL.
        If no OGP information is found for the specified URL, it returns an empty OGP information with type set to empty.
      parameters:
        - schema:
            type: string
          in: query
          required: true
          name: url
          description: The URL for which you want to get OGP
  /ogp/cache:
    delete:
      summary: Delete cache of OGP information
      tags:
        - ogp
      responses:
        '204':
          description: No Content
        '400':
          description: The specified URL is invalid.
      operationId: deleteOgpCache
      description: Clears the cache for the OGP information for the specified URL.
      parameters:
        - schema:
            type: string
          in: query
          required: true
          name: url
          description: URL for which you want to delete the OGP cache
  /users/me/settings:
    get:
      summary: Get user settings
      description: Gets the user settings.
      operationId: getUserSettings
      tags:
        - me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
  /users/me/settings/notify-citation:
    get:
      summary: Gets message quote notification settings.
      description: Changes the setting information for message quote notifications.
      operationId: getMyNotifyCitation
      tags:
        - me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotifyCitation'
    put:
      summary: Change message quote notification settings
      responses:
        '204':
          description: Changed successfully.
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutNotifyCitationRequest'
        description: ''
      tags:
        - me
      operationId: changeMyNotifyCitation
      description: Changes the settings for message quote notifications.
  '/channels/{channelId}/path':
    parameters:
      - $ref: '#/components/parameters/channelIdInPath'
    get:
      summary: Get the specified channel path.
      tags:
        - channel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelPath'
        '404':
          description: Not Found
      operationId: getChannelPath
      description: Gets the path of the specified channel.
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: r_session
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /api/v3/oauth2/authorize
          tokenUrl: /api/v3/oauth2/token
          scopes:
            read: read scope
            write: write scope
            manage_bot: Bot-related read/write scope
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Message:
      title: Message
      type: object
      description: Message
      properties:
        id:
          type: string
          format: uuid
          description: Message UUID
        userId:
          type: string
          description: Author UUID
          format: uuid
        channelId:
          type: string
          description: Channel UUID
          format: uuid
        content:
          type: string
          description: The message body.
        createdAt:
          type: string
          format: date-time
          description: Post date
        updatedAt:
          type: string
          format: date-time
          description: Edit date
        pinned:
          description: Whether or not it is pinned
          type: boolean
        stamps:
          type: array
          description: An array of stamps being pressed
          items:
            $ref: '#/components/schemas/MessageStamp'
        threadId:
          type: string
          format: uuid
          description: Thread UUID
          nullable: true
      required:
        - id
        - userId
        - channelId
        - content
        - createdAt
        - updatedAt
        - pinned
        - stamps
        - threadId
    MessageStamp:
      title: MessageStamp
      type: object
      description: A stamp applied to a message
      properties:
        userId:
          type: string
          format: uuid
          description: User UUID
        stampId:
          type: string
          format: uuid
          description: Stamp UUID
        count:
          type: integer
          description: Number of stamps
          format: int32
        createdAt:
          type: string
          description: The date and time the stamp was first applied
          format: date-time
        updatedAt:
          type: string
          format: date-time
          description: The date and time the stamp was last applied
      required:
        - userId
        - stampId
        - count
        - createdAt
        - updatedAt
    StampStats:
      title: StampStats
      type: object
      description: Stamp statistics
      properties:
        count:
          type: integer
          format: int64
          description: The total number of stamps used (does not count multiple stamps used by the same user on the same message)
        totalCount:
          type: integer
          format: int64
          description: Total number of stamps used (all counted)
      required:
        - count
        - totalCount
    Pin:
      title: Pin
      type: object
      description: Pin information (with message body)
      properties:
        userId:
          type: string
          format: uuid
          description: Pinned user UUID
        pinnedAt:
          type: string
          format: date-time
          description: The pinned date and time
        Message:
          $ref: '#/components/schemas/Message'
      required:
        - userId
        - pinnedAt
        - message
    Channel:
      title: Channel
      type: object
      description: Channel
      properties:
        id:
          type: string
          description: Channel UUID
          format: uuid
        parentId:
          type: string
          format: uuid
          description: Parent channel UUID
          nullable: true
        Archived:
          type: boolean
          description: Whether the channel is archived
        force:
          type: boolean
          description: Is this a forced notification channel?
        topic:
          type: string
          description: Channel topic
        name:
          type: string
          description: Channel name
          pattern: '^[a-zA-Z0-9-_]{1,20}$'
        children:
          type: array
          description: An array of UUIDs for child channels.
          items:
            type: string
            format: uuid
      required:
        - id
        - parentId
        - Archived
        - force
        - topic
        - name
        - children
    PostMessageRequest:
      title: PostMessageRequest
      type: object
      description: Message post request
      properties:
        content:
          type: string
          description: The message body.
          minLength: 1
          maxLength: 10000
        embed:
          type: boolean
          default: false
          description: Whether to automatically embed mentions and channel links
      required:
        - content
    ChannelStats:
      title: ChannelStats
      type: object
      description: Channel statistics
      properties:
        totalMessageCount:
          type: integer
          format: int64
          description: The total number of messages posted on the channel (including deleted ones).
        stamps:
          type: array
          description: Stamp statistics on the channel
          items:
            $ref: '#/components/schemas/ChannelStatsStamp'
        users:
          type: array
          description: Statistics for users on the channel
          items:
            $ref: '#/components/schemas/ChannelStatsUser'
        datetime:
          type: string
          format: date-time
          description: Statistics date and time
      required:
        - totalMessageCount
        - stamps
        - users
        - datetime
    ChannelStatsStamp:
      title: ChannelStatsStamp
      type: object
      description: Statistics for a particular stamp on a channel
      properties:
        id:
          type: string
          format: uuid
          description: Stamp ID
        count:
          type: integer
          format: int64
          description: Number of stamps (does not count multiple stamps on the same message)
        total:
          type: integer
          format: int64
          description: Number of stamps (multiple stamps on the same message are counted)
      required:
        - id
        - count
        - total
    ChannelStatsUser:
      title: ChannelStatsUser
      type: object
      description: Stats for a specific user on a channel
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        messageCount:
          type: integer
          format: int64
          description: Number of messages
      required:
        - id
        - messageCount
    ChannelTopic:
      title: ChannelTopic
      type: object
      description: Channel topic
      properties:
        topic:
          type: string
          description: Topic
      required:
        - topic
    PutChannelTopicRequest:
      title: PutChannelTopicRequest
      type: object
      description: Channel topic edit request
      properties:
        topic:
          type: string
          description: Topic
          maxLength: 200
      required:
        - topic
    ChannelViewer:
      title: ChannelViewer
      type: object
      description: Channel viewers information
      properties:
        userId:
          type: string
          format: uuid
          description: User UUID
        state:
          $ref: '#/components/schemas/ChannelViewState'
        updatedAt:
          type: string
          format: date-time
          description: Updated date
      required:
        - userId
        - state
        - updatedAt
    MyChannelViewState:
      title: MyChannelViewState
      type: object
      description: Your channel viewing status
      properties:
        key:
          type: string
          description: WS session identifier
        channelId:
          type: string
          format: uuid
          description: Channel UUID
        state:
          $ref: '#/components/schemas/ChannelViewState'
      required:
        - key
        - channelId
        - state
    ChannelViewState:
      type: string
      title: ChannelViewState
      enum:
        - none
        - monitoring
        - editing
      x-enum-descriptions:
        - Background display
        - Message displayed
        - Typing message
      description: View state
    PostFileRequest:
      title: PostFileRequest
      type: object
      description: File upload request
      properties:
        file:
          type: string
          format: binary
          description: The file body
        channelId:
          type: string
          format: uuid
          description: The upload destination channel UUID
      required:
        - file
        - channelId
    ThumbnailType:
      title: ThumbnailType
      type: string
      default: image
      description: |
        Thumbnail Image Type
      enum:
        - image
        - waveform
      x-enum-descriptions:
        - Regular thumbnails generated for uploaded images
        - Waveform image generated for uploaded audio file
    ThumbnailInfo:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ThumbnailType'
        mime:
          type: string
          description: MIME type
        width:
          type: integer
          format: int32
          description: Thumbnail width
        height:
          type: integer
          format: int32
          description: thumbnail height
      required:
        - type
        - mime
    FileInfo:
      title: FileInfo
      type: object
      description: File information
      properties:
        id:
          type: string
          description: File UUID
          format: uuid
        name:
          type: string
          description: File name
        mime:
          type: string
          description: MIME type
        Size:
          type: integer
          format: int64
          description: File size
        md5:
          type: string
          description: MD5 hash
        isAnimatedImage:
          type: boolean
          description: Is this an animated image?
        createdAt:
          type: string
          format: date-time
          description: Upload date
        thumbnails:
          type: array
          items:
            $ref: '#/components/schemas/ThumbnailInfo'
        thumbnail:
          deprecated: true
          type: object
          description: |-
            Thumbnail Information
            If no thumbnail exists, this will be null.
            Deprecated: See thumbnails
          nullable: true
          properties:
            mime:
              deprecated: true
              type: string
              description: MIME type
            width:
              deprecated: true
              type: integer
              format: int32
              description: Thumbnail width
            height:
              deprecated: true
              type: integer
              description: thumbnail height
              format: int32
          required:
            - mime
        channelId:
          type: string
          description: The channel UUID it belongs to
          nullable: true
          format: uuid
        uploaderId:
          type: string
          description: Uploader UUID
          format: uuid
          nullable: true
      required:
        - id
        - name
        - mime
        - size
        - md5
        - isAnimatedImage
        - createdAt
        - thumbnail
        - channelId
        - uploaderId
        - thumbnails
    PostMessageStampRequest:
      title: PostMessageStampRequest
      type: object
      description: Stamp request
      properties:
        count:
          type: integer
          description: Number to press
          format: int32
          minimum: 1
          maximum: 100
      required:
        - count
    Stamp:
      title: Stamp
      type: object
      description: Stamp information
      properties:
        id:
          type: string
          format: uuid
          description: Stamp UUID
        name:
          type: string
          description: Stamp name
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
        creatorId:
          type: string
          description: Creator UUID
          format: uuid
        createdAt:
          type: string
          description: Date and time of creation
          format: date-time
        updatedAt:
          type: string
          description: Updated date
          format: date-time
        fileId:
          type: string
          format: uuid
          description: File UUID
        isUnicode:
          type: boolean
          description: Unicode emoji?
      required:
        - id
        - name
        - creatorId
        - createdAt
        - updatedAt
        - fileId
        - isUnicode
    PostStampRequest:
      title: PostStampRequest
      type: object
      description: Stamp creation request
      properties:
        name:
          type: string
          description: Stamp name
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
        file:
          type: string
          format: binary
          description: 'Stamp image (png, jpeg, gif up to 1MB)'
      required:
        - name
        - file
    StampHistoryEntry:
      title: StampHistoryEntry
      type: object
      description: 1 item in stamp history
      properties:
        stampId:
          type: string
          format: uuid
          description: Stamp UUID
        datetime:
          type: string
          description: Date and time of use
          format: date-time
      required:
        - stampId
        - datetime
    StampWithThumbnail:
      title: StampWithThumbnail
      type: object
      description: Stamp information and thumbnail availability
      properties:
        id:
          type: string
          format: uuid
          description: Stamp UUID
        name:
          type: string
          description: Stamp name
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
        creatorId:
          type: string
          description: Creator UUID
          format: uuid
        createdAt:
          type: string
          description: Date and time of creation
          format: date-time
        updatedAt:
          type: string
          description: Updated date
          format: date-time
        fileId:
          type: string
          format: uuid
          description: File UUID
        isUnicode:
          type: boolean
          description: Unicode emoji?
        hasThumbnail:
          type: boolean
          description: Whether or not to display thumbnails
      required:
        - id
        - name
        - creatorId
        - createdAt
        - updatedAt
        - fileId
        - isUnicode
        - hasThumbnail
    User:
      title: User
      type: object
      description: User information
      properties:
        id:
          type: string
          description: User UUID
          format: uuid
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: Username
        displayname:
          type: string
          description: User display name
          minLength: 0
          maxLength: 32
        iconFileId:
          type: string
          format: uuid
          description: Icon file UUID
        bot:
          type: boolean
          description: BOT or not
        state:
          $ref: '#/components/schemas/UserAccountState'
        updatedAt:
          type: string
          description: Updated date
          format: date-time
      required:
        - id
        - name
        - displayName
        - iconFileId
        - bot
        - state
        - updatedAt
    UserDetail:
      title: UserDetail
      type: object
      description: User details
      properties:
        id:
          type: string
          format: uuid
          description: User UUID
        state:
          $ref: '#/components/schemas/UserAccountState'
        bot:
          type: boolean
          description: BOT or not
        iconFileId:
          type: string
          format: uuid
          description: Icon file UUID
        displayname:
          type: string
          description: User display name
          minLength: 0
          maxLength: 32
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: Username
        twitterId:
          type: string
          description: Twitter ID
          pattern: '^[a-zA-Z0-9_]{0,15}$'
        lastOnline:
          type: string
          description: Last online date
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          description: Updated date
        tags:
          type: array
          description: Tag list
          items:
            $ref: '#/components/schemas/UserTag'
        groups:
          type: array
          description: Array of UUIDs of groups
          items:
            type: string
            format: uuid
        bio:
          type: string
          description: biography
          maxLength: 1000
        homeChannel:
          type: string
          format: uuid
          description: Home Channel
          nullable: true
      required:
        - id
        - state
        - bot
        - iconFileId
        - displayName
        - name
        - twitterId
        - lastOnline
        - updatedAt
        - tags
        - groups
        - bio
        - homeChannel
    UserTag:
      title: UserTag
      type: object
      description: User tag
      properties:
        tagId:
          type: string
          description: Tag UUID
          format: uuid
        Tag:
          type: string
          description: tag string
        isLocked:
          type: boolean
          description: Whether the tag is locked
        createdAt:
          type: string
          description: The date and time the tag was added
          format: date-time
        updatedAt:
          type: string
          format: date-time
          description: The tag update date and time
      required:
        - tagId
        - tag
        - isLocked
        - createdAt
        - updatedAt
    UserAccountState:
      type: integer
      title: UserAccountState
      description: |-
        User Account Status
        0: Stop
        1: Enabled
        2: Pause
      enum:
        - 0
        - 1
        - 2
      x-enum-varnames:
        - deactivated
        - active
        - suspended
      x-enum-descriptions:
        - Stop
        - valid
        - Pause
      format: int32
    UserGroup:
      title: UserGroup
      type: object
      description: User group
      properties:
        id:
          type: string
          format: uuid
          description: Group UUID
        name:
          type: string
          description: Group name
        description:
          type: string
          description: Group description
        type:
          type: string
          description: Group type
        icon:
          type: string
          format: uuid
          description: Group icon UUID
        members:
          type: array
          description: Array of group members
          items:
            $ref: '#/components/schemas/UserGroupMember'
        createdAt:
          type: string
          description: Date and time of creation
          format: date-time
        updatedAt:
          type: string
          format: date-time
          description: Updated date
        admins:
          type: array
          description: An array of UUIDs of group administrators
          items:
            type: string
            format: uuid
      required:
        - id
        - name
        - description
        - type
        - icon
        - members
        - createdAt
        - updatedAt
        - admins
    UserGroupMember:
      title: UserGroupMember
      type: object
      description: User group members
      properties:
        id:
          type: string
          format: uuid
          description: User UUID
        role:
          type: string
          description: User role
          maxLength: 100
      required:
        - id
        - role
    UserGroupMembers:
      title: UserGroupMembers
      type: array
      description: Array of user group members
      items:
        $ref: '#/components/schemas/UserGroupMember'
    UserStats:
      title: UserStats
      type: object
      description: User statistics
      properties:
        totalMessageCount:
          type: integer
          format: int64
          description: The total number of messages posted by the user (including deleted ones).
        stamps:
          type: array
          description: User's stamp statistics
          items:
            $ref: '#/components/schemas/UserStatsStamp'
        datetime:
          type: string
          format: date-time
          description: Statistics date and time
      required:
        - totalMessageCount
        - stamps
        - datetime
    UserStatsStamp:
      title: UserStatsStamp
      type: object
      description: User specific stamp statistics
      properties:
        id:
          type: string
          format: uuid
          description: Stamp ID
        count:
          type: integer
          format: int64
          description: Number of stamps (does not count multiple stamps on the same message)
        total:
          type: integer
          format: int64
          description: Number of stamps (multiple stamps on the same message are counted)
      required:
        - id
        - count
        - total
    PatchGroupMemberRequest:
      title: PatchGroupMemberRequest
      type: object
      description: User group member edit request
      properties:
        role:
          type: string
          description: User role
          maxLength: 100
      required:
        - role
    PatchUserGroupRequest:
      title: PatchUserGroupRequest
      type: object
      description: User group edit request
      properties:
        name:
          type: string
          description: Group name
        description:
          type: string
          description: Group description
          maxLength: 100
        type:
          type: string
          description: Group type
    PostUserGroupRequest:
      title: PostUserGroupRequest
      type: object
      description: User group creation request
      properties:
        name:
          type: string
          description: Group name
        description:
          type: string
          description: Description
          maxLength: 100
        type:
          type: string
          description: Group type
      required:
        - name
        - description
        - type
    MyUserDetail:
      title: MyUserDetail
      type: object
      description: Your user details
      properties:
        id:
          type: string
          description: User UUID
          format: uuid
        bio:
          type: string
          description: biography
          maxLength: 1000
        groups:
          type: array
          description: Array of UUIDs of groups
          items:
            type: string
            format: uuid
        tags:
          type: array
          description: Tag list
          items:
            $ref: '#/components/schemas/UserTag'
        updatedAt:
          type: string
          format: date-time
          description: Updated date
        lastOnline:
          type: string
          description: Last online date
          format: date-time
          nullable: true
        twitterId:
          type: string
          description: Twitter ID
          pattern: '^[a-zA-Z0-9_]{1,15}$'
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: Username
        displayname:
          type: string
          description: User display name
          minLength: 0
          maxLength: 32
        iconFileId:
          type: string
          format: uuid
          description: Icon file UUID
        bot:
          type: boolean
          description: BOT or not
        state:
          $ref: '#/components/schemas/UserAccountState'
        permissions:
          type: array
          description: An array of the permissions you have.
          items:
            $ref: '#/components/schemas/UserPermission'
        homeChannel:
          type: string
          format: uuid
          description: Home Channel
          nullable: true
      required:
        - id
        - bio
        - groups
        - tags
        - updatedAt
        - lastOnline
        - twitterId
        - name
        - displayName
        - iconFileId
        - bot
        - state
        - permissions
        - homeChannel
    OIDCUserInfo:
      title: OIDCUserInfo
      type: object
      description: Your user details
      properties:
        sub:
          type: string
          description: User UUID
          format: uuid
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: Username
        preferred_username:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: Username
        picture:
          type: string
          description: Icon image URL
        updated_at:
          type: integer
          format: int64
          description: Updated date
        traq:
          $ref: '#/components/schemas/OIDCTraqUserInfo'
      required:
        - sub
        - name
        - preferred_username
        - picture
    OIDCTraqUserInfo:
      title: OIDCTraqUserInfo
      type: object
      description: traQ specific user details
      properties:
        bio:
          type: string
          description: biography
          maxLength: 1000
        groups:
          type: array
          description: Array of UUIDs of groups
          items:
            type: string
            format: uuid
        tags:
          type: array
          description: Tag list
          items:
            $ref: '#/components/schemas/UserTag'
        last_online:
          type: string
          description: Last online date
          format: date-time
          nullable: true
        twitter_id:
          type: string
          description: Twitter ID
          pattern: '^[a-zA-Z0-9_]{1,15}$'
        display_name:
          type: string
          description: User display name
          minLength: 0
          maxLength: 32
        icon_file_id:
          type: string
          format: uuid
          description: Icon file UUID
        bot:
          type: boolean
          description: BOT or not
        state:
          $ref: '#/components/schemas/UserAccountState'
        permissions:
          type: array
          description: An array of the permissions you have.
          items:
            $ref: '#/components/schemas/UserPermission'
        home_channel:
          type: string
          format: uuid
          description: Home Channel
          nullable: true
      required:
        - bio
        - groups
        - tags
        - updated_at
        - last_online
        - twitter_id
        - display_name
        - icon_file_id
        - bot
        - state
        - permissions
        - home_channel
    PatchChannelSubscribersRequest:
      title: PatchChannelSubscribersRequest
      type: object
      description: Channel subscriber edit request
      properties:
        'on':
          type: array
          description: An array of UUIDs for users who want notifications turned on
          items:
            type: string
            format: uuid
        'off':
          type: array
          description: An array of UUIDs for users to turn off notifications for
          items:
            type: string
            format: uuid
    PutChannelSubscribersRequest:
      title: PutChannelSubscribersRequest
      type: object
      description: An array of UUIDs for users who want notifications turned on
      properties:
        'on':
          type: array
          format: uuid
          description: An array of UUIDs for users who want notifications turned on
          items:
            type: string
            format: uuid
      required:
        - 'on'
    UserSubscribeState:
      title: UserSubscribeState
      type: object
      description: The user's channel subscription status
      properties:
        channelId:
          type: string
          description: Channel UUID
          format: uuid
        Level:
          $ref: '#/components/schemas/ChannelSubscribeLevel'
      required:
        - channelId
        - level
    ChannelSubscribeLevel:
      type: integer
      title: ChannelSubscribeLevel
      description: |-
        Channel Subscription Level
        0: None
        1: Unread management
        2: Unread management + notifications
      enum:
        - 0
        - 1
        - 2
      x-enum-varnames:
        - none
        - subscribed
        - notified
      x-enum-descriptions:
        - none
        - Unread management
        - Unread management + notifications
    PutChannelSubscribeLevelRequest:
      title: PutChannelSubscribeLevelRequest
      type: object
      description: Channel subscription level change request
      properties:
        Level:
          $ref: '#/components/schemas/ChannelSubscribeLevel'
      required:
        - level
    Webhook:
      title: Webhook
      type: object
      description: Webhook information
      properties:
        id:
          type: string
          format: uuid
          description: WebhookUUID
        botUserId:
          type: string
          description: Webhook user UUID
          format: uuid
        displayname:
          type: string
          description: Webhook user display name
        description:
          type: string
          description: Description
        secure:
          type: boolean
          description: Is this a secure webhook?
        channelId:
          type: string
          description: The default channel UUID to post to.
          format: uuid
        ownerId:
          type: string
          description: Owner UUID
          format: uuid
        createdAt:
          type: string
          description: Date and time of creation
          format: date-time
        updatedAt:
          type: string
          description: Updated date
          format: date-time
      required:
        - id
        - botUserId
        - displayName
        - description
        - secure
        - channelId
        - ownerId
        - createdAt
        - updatedAt
    PatchWebhookRequest:
      title: PatchWebhookRequest
      type: object
      description: Webhook information change request
      properties:
        name:
          type: string
          description: Webhook user display name
          minLength: 1
          maxLength: 32
        description:
          type: string
          description: Description
          maxLength: 1000
        channelId:
          type: string
          format: uuid
          description: The default channel UUID to post to.
        secret:
          type: string
          description: Webhook secret
          maxLength: 50
        ownerId:
          type: string
          format: uuid
          description: The UUID of the user to whom the transfer is to be made
    PostWebhookRequest:
      title: PostWebhookRequest
      type: object
      description: Webhook creation request
      properties:
        name:
          type: string
          description: The display name of the webhook user
          minLength: 1
          maxLength: 32
        description:
          type: string
          description: Description
          minLength: 1
          maxLength: 1000
        channelId:
          type: string
          format: uuid
          description: The default channel UUID to post to.
        secret:
          type: string
          description: Webhook secret
          maxLength: 50
      required:
        - name
        - description
        - channelId
        - Secret
    PutUserIconRequest:
      title: PutUserIconRequest
      type: object
      description: Icon image change request
      properties:
        file:
          type: string
          format: binary
          description: 'Icon image (png, jpeg, gif up to 2MB)'
      required:
        - file
    PutMyPasswordRequest:
      title: PutMyPasswordRequest
      type: object
      description: Password change request
      properties:
        password:
          type: string
          pattern: "^[\\x20-\\x7E]{10,32}$"
          description: Current password
        newPassword:
          type: string
          pattern: "^[\\x20-\\x7E]{10,32}$"
          description: New password
      required:
        - password
        - newPassword
    PatchMeRequest:
      title: PatchMeRequest
      type: object
      description: Request to change my user information
      properties:
        displayname:
          type: string
          minLength: 0
          maxLength: 32
          description: The new display name.
        twitterId:
          type: string
          pattern: '^[a-zA-Z0-9_]{1,15}$'
          description: TwitterID
        bio:
          type: string
          description: biography
          maxLength: 1000
        homeChannel:
          type: string
          description: |-
            Home Channel UUID
            Specifying `00000000-0000-0000-0000-000000000000` will set the home channel to `null`
          format: uuid
    PutUserPasswordRequest:
      title: PutUserPasswordRequest
      type: object
      properties:
        newPassword:
          type: string
          description: New password
          pattern: "^[\\x20-\\x7E]{10,32}$"
      required:
        - newPassword
      description: User password change request
    PatchUserRequest:
      title: PatchUserRequest
      type: object
      description: User information edit request
      properties:
        displayname:
          type: string
          description: The new display name.
          maxLength: 32
        twitterId:
          type: string
          description: TwitterID
          pattern: '^[a-zA-Z0-9_]{1,15}$'
        state:
          $ref: '#/components/schemas/UserAccountState'
        role:
          type: string
          description: User role
    PostMyFCMDeviceRequest:
      title: PostMyFCMDeviceRequest
      type: object
      description: FCM device registration request
      properties:
        token:
          type: string
          description: FCM device token
          example: 'bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      required:
        - token
    PostUserRequest:
      title: PostUserRequest
      type: object
      description: User registration request
      properties:
        name:
          type: string
          description: Username
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
        password:
          type: string
          pattern: "^[\\x20-\\x7E]{10,32}$"
          description: Password
      required:
        - name
    PostChannelRequest:
      title: PostChannelRequest
      type: object
      description: Channel creation request
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z0-9-_]{1,20}$'
          description: Channel name
        parent:
          type: string
          format: uuid
          description: |-
            Parent channel UUID
            Specify null if you want to create it in the root.
          nullable: true
      required:
        - name
        - parent
    PostUserTagRequest:
      title: PostUserTagRequest
      type: object
      description: User tag addition request
      properties:
        Tag:
          type: string
          description: tag string
          minLength: 1
          maxLength: 30
      required:
        - tag
    PatchUserTagRequest:
      title: PatchUserTagRequest
      type: object
      description: A user's request to edit tags
      properties:
        isLocked:
          type: boolean
          description: The lock state of the tag.
      required:
        - isLocked
    Tag:
      title: Tag
      type: object
      description: Tag information
      properties:
        id:
          type: string
          description: Tag UUID
          format: uuid
        Tag:
          type: string
          description: tag string
          minLength: 1
          maxLength: 30
        users:
          type: array
          description: An array of UUIDs of users who have been tagged
          items:
            type: string
            format: uuid
      required:
        - id
        - tag
        - users
    PostStarRequest:
      title: PostStarRequest
      type: object
      description: Star addition request
      properties:
        channelId:
          type: string
          description: Channel UUID
          format: uuid
      required:
        - channelId
    UnreadChannel:
      title: UnreadChannel
      type: object
      description: Unread channel information
      properties:
        channelId:
          type: string
          description: Channel UUID
          format: uuid
        count:
          type: integer
          description: Number of unread messages
          format: int32
        Сирии:
          type: boolean
          description: Whether a message to you is included
        since:
          type: string
          format: date-time
          description: The date and time of the oldest unread message in the channel.
        updatedAt:
          type: string
          description: The date and time of the most recent unread message in the channel.
          format: date-time
        oldestMessageId:
          type: string
          description: The id of the oldest unread message in that channel
          format: uuid
      required:
        - channelId
        - count
        - noticeable
        - since
        - Until
        - updatedAt
        - oldestMessageId
    PostLoginRequest:
      title: PostLoginRequest
      type: object
      description: Login request
      properties:
        name:
          type: string
          description: Username
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
        password:
          type: string
          description: Password
          pattern: "^[\\x20-\\x7E]{10,32}$"
      required:
        - name
        - password
    LoginSession:
      title: LoginSession
      type: object
      description: Login session information
      properties:
        id:
          type: string
          description: Session UUID
          format: uuid
        issuedAt:
          type: string
          description: Issue date
          format: date-time
      required:
        - id
        - issuedAt
    ActiveOAuth2Token:
      title: ActiveOAuth2Token
      type: object
      description: Valid OAuth2 token information
      properties:
        id:
          type: string
          description: Token UUID
          format: uuid
        clientId:
          type: string
          description: OAuth2 client UUID
        scopes:
          type: array
          description: Scope
          items:
            $ref: '#/components/schemas/OAuth2Scope'
        issuedAt:
          type: string
          description: Issue date
          format: date-time
      required:
        - id
        - clientId
        - scopes
        - issuedAt
    OAuth2Scope:
      type: string
      title: OAuth2Scope
      description: OAuth2 scope
      enum:
        - openid
        - profile
        - read
        - write
        - manage_bot
    OAuth2Client:
      title: OAuth2Client
      type: object
      description: OAuth2 client information
      properties:
        id:
          type: string
          description: Client UUID
        name:
          type: string
          description: Client name
          minLength: 1
          maxLength: 32
        description:
          type: string
          description: Description
          maxLength: 1000
        developerId:
          type: string
          description: Client developer UUID
          format: uuid
        scopes:
          type: array
          description: An array of request scopes.
          items:
            $ref: '#/components/schemas/OAuth2Scope'
        Confidential:
          type: boolean
          description: true if confidential client, false if public client
      required:
        - id
        - name
        - description
        - developerId
        - scopes
        - confidential
    PatchClientRequest:
      title: PatchClientRequest
      type: object
      description: OAuth2 client information change request
      properties:
        name:
          type: string
          description: Client name
          minLength: 1
          maxLength: 32
        description:
          type: string
          description: Description
          maxLength: 1000
        callbackUrl:
          type: string
          description: The callback URL.
          format: uri
        developerId:
          type: string
          description: Client developer UUID
          format: uuid
        Confidential:
          type: boolean
          description: true if confidential client, false if public client
    OAuth2ClientDetail:
      title: OAuth2ClientDetail
      description: OAuth2 client details
      type: object
      properties:
        id:
          type: string
          description: Client UUID
        developerId:
          type: string
          description: Client developer UUID
          format: uuid
        description:
          type: string
          description: Description
          maxLength: 1000
        name:
          type: string
          description: Client name
          minLength: 1
          maxLength: 32
        scopes:
          type: array
          description: An array of request scopes.
          items:
            $ref: '#/components/schemas/OAuth2Scope'
        callbackUrl:
          type: string
          description: The callback URL.
          format: uri
        secret:
          type: string
          description: Client secret
        Confidential:
          type: boolean
          description: true if confidential client, false if public client
      required:
        - id
        - developerId
        - description
        - name
        - scopes
        - callbackUrl
        - Secret
        - confidential
    PostClientRequest:
      title: PostClientRequest
      type: object
      description: OAuth2 client creation request
      properties:
        name:
          type: string
          maxLength: 32
          minLength: 1
          description: Client name
        callbackUrl:
          type: string
          description: The callback URL.
          format: uri
        scopes:
          type: array
          description: An array of request scopes.
          items:
            $ref: '#/components/schemas/OAuth2Scope'
        description:
          type: string
          description: Description
          maxLength: 1000
        Confidential:
          type: boolean
          description: true if confidential client, false if public client
          default: false
      required:
        - name
        - callbackUrl
        - scopes
        - description
    BotMode:
      type: string
      title: BotMode
      description: |-
        BOT operation mode

        HTTP: HTTP Mode
        WebSocket: WebSocket Mode
      enum:
        - HTTP
        - WebSocket
      x-enum-varnames:
        - HTTP
        - WebSocket
      x-enum-descriptions:
        - HTTP Mode
        - WebSocket Mode
    BotState:
      type: integer
      title: BotState
      description: |-
        BOT state
        0: Stop
        1: Enabled
        2: Pause
      enum:
        - 0
        - 1
        - 2
      x-enum-varnames:
        - deactivated
        - active
        - suspended
      x-enum-descriptions:
        - Stop
        - valid
        - Pause
      format: int32
    Bot:
      title: Bot
      type: object
      description: BOT information
      properties:
        id:
          type: string
          description: BOT UUID
          format: uuid
        botUserId:
          type: string
          description: BOT user UUID
          format: uuid
        description:
          type: string
          description: Description
          maxLength: 1000
        developerId:
          type: string
          description: BOT developer UUID
          format: uuid
        subscribeEvents:
          type: array
          description: An array of events the bot is subscribed to
          items:
            type: string
        mode:
          $ref: '#/components/schemas/BotMode'
        state:
          $ref: '#/components/schemas/BotState'
        createdAt:
          type: string
          description: Date and time of creation
          format: date-time
        updatedAt:
          type: string
          description: Updated date
          format: date-time
      required:
        - id
        - botUserId
        - description
        - developerId
        - subscribeEvents
        - mode
        - state
        - createdAt
        - updatedAt
    PatchBotRequest:
      title: PatchBotRequest
      type: object
      description: BOT information change request
      properties:
        displayname:
          type: string
          maxLength: 32
          description: BOT user display name
        description:
          type: string
          description: Description of the BOT
          maxLength: 1000
        privileged:
          type: boolean
          description: Privilege
        mode:
          $ref: '#/components/schemas/BotMode'
        endpoint:
          type: string
          description: BOT server endpoint
          format: uri
        developerId:
          type: string
          description: The UUID of the developer to whom the transfer is being made
          format: uuid
        subscribeEvents:
          type: array
          description: The event to subscribe to.
          uniqueItems: false
          items:
            type: string
        bio:
          type: string
          description: biography
          maxLength: 1000
    BotTokens:
      title: BotTokens
      type: object
      description: BOT token information
      properties:
        verificationToken:
          type: string
          description: Verification Token
        accessToken:
          type: string
          description: BOT access token
      required:
        - verificationToken
        - accessToken
    BotDetail:
      title: BotDetail
      type: object
      description: BOT details
      properties:
        id:
          type: string
          format: uuid
          description: BOT UUID
        updatedAt:
          type: string
          description: Updated date
          format: date-time
        createdAt:
          type: string
          description: Date and time of creation
          format: date-time
        mode:
          $ref: '#/components/schemas/BotMode'
        state:
          $ref: '#/components/schemas/BotState'
        subscribeEvents:
          type: array
          description: An array of events the bot is subscribed to
          items:
            type: string
        developerId:
          type: string
          description: BOT developer UUID
          format: uuid
        description:
          type: string
          description: Description
          maxLength: 1000
        botUserId:
          type: string
          description: BOT user UUID
          format: uuid
        tokens:
          $ref: '#/components/schemas/BotTokens'
        endpoint:
          type: string
          description: BOT server endpoint
          format: uri
        privileged:
          type: boolean
          description: Is this a privileged bot?
        channels:
          type: array
          description: An array of UUIDs of the channels the bot is in
          items:
            type: string
            format: uuid
      required:
        - id
        - updatedAt
        - createdAt
        - mode
        - state
        - subscribeEvents
        - developerId
        - description
        - botUserId
        - tokens
        - endpoint
        - privileged
        - channels
        - bio
    BotEventLog:
      title: BotEventLog
      type: object
      description: BOT event log
      properties:
        botId:
          type: string
          description: BOT UUID
          format: uuid
        requestId:
          type: string
          format: uuid
          description: Request UUID
        event:
          type: string
          description: Event type
        result:
          $ref: '#/components/schemas/BotEventResult'
        code:
          type: integer
          description: The status code.
          format: int32
        datetime:
          type: string
          format: date-time
          description: Event date and time
      required:
        - botId
        - requestId
        - event
        - code
        - datetime
    BotEventResult:
      title: BotEventResult
      type: string
      description: Event delivery result
      enum:
        - OK
        - ng
        - ne
        - dp
      x-enum-varnames:
        - OK
        - NG
        - NetworkError
        - Dropped
      x-enum-descriptions:
        - Success
        - Failure (invalid response)
        - Network Error
        - (WebSocket Mode only) There was no connected session
    PostBotRequest:
      title: PostBotRequest
      type: object
      description: BOT creation request
      properties:
        name:
          type: string
          description: |-
            BOT User ID
            The prefix "BOT_" will be added automatically.
          maxLength: 16
          pattern: '^[a-zA-Z0-9_-]{1,16}$'
        displayname:
          type: string
          maxLength: 32
          description: BOT user display name
        description:
          type: string
          description: Description of the BOT
          maxLength: 1000
        mode:
          $ref: '#/components/schemas/BotMode'
        endpoint:
          type: string
          description: |-
            BOT Server Endpoint
            Required if the BOT operation mode is HTTP
          format: uri
      required:
        - name
        - displayName
        - description
        - mode
    PostBotActionJoinRequest:
      title: PostBotActionJoinRequest
      type: object
      properties:
        channelId:
          type: string
          description: Channel UUID
          format: uuid
      required:
        - channelId
      description: BOT channel join request
    PostBotActionLeaveRequest:
      title: PostBotActionLeaveRequest
      type: object
      properties:
        channelId:
          type: string
          description: Channel UUID
          format: uuid
      required:
        - channelId
      description: BOT channel exit request
    BotUser:
      title: BotUser
      type: object
      description: BOT user vs.
      properties:
        id:
          type: string
          description: BOT UUID
          format: uuid
        botUserId:
          type: string
          description: BOT user UUID
          format: uuid
      required:
        - id
        - botUserId
    PostWebRTCAuthenticateRequest:
      title: PostWebRTCAuthenticateRequest
      type: object
      description: Authentication request for skyway
      properties:
        peerId:
          type: string
          description: Peer ID
      required:
        - peerId
    WebRTCAuthenticateResult:
      title: WebRTCAuthenticateResult
      type: object
      description: Skyway authentication request result
      properties:
        peerId:
          type: string
          description: Peer ID
        ttl:
          type: integer
          description: TTL
          format: int32
        timestamp:
          type: integer
          format: int64
          description: timestamp
        authToken:
          type: string
          description: Authentication token
      required:
        - peerId
        - ttl
        - timestamp
        - authToken
    PatchChannelRequest:
      title: PatchChannelRequest
      type: object
      description: Channel information change request
      properties:
        name:
          type: string
          description: Channel name
          pattern: '^[a-zA-Z0-9-_]{1,20}$'
        Archived:
          type: boolean
          description: Is this archived?
        force:
          type: boolean
          description: Is this a forced notification channel?
        parent:
          type: string
          description: Parent channel UUID
          format: uuid
    WebRTCUserStates:
      title: WebRTCUserStates
      type: array
      description: An array of WebRTC states
      items:
        $ref: '#/components/schemas/WebRTCUserState'
    ClipFolder:
      title: ClipFolder
      type: object
      description: Clip folder information
      properties:
        id:
          type: string
          description: Folder UUID
          format: uuid
        name:
          type: string
          description: The name of the folder.
          minLength: 1
          maxLength: 30
        createdAt:
          type: string
          description: Date and time of creation
          format: date-time
        ownerId:
          type: string
          format: uuid
          description: Folder owner UUID
        description:
          type: string
          description: Description
          maxLength: 1000
      required:
        - id
        - name
        - createdAt
        - ownerId
        - description
    PatchClipFolderRequest:
      title: PatchClipFolderRequest
      type: object
      description: Clip folder information edit request
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 30
          description: The name of the folder.
        description:
          type: string
          description: Description
          maxLength: 1000
    PostClipFolderRequest:
      title: PostClipFolderRequest
      type: object
      description: Clip folder creation request
      properties:
        name:
          type: string
          description: The name of the folder.
          minLength: 1
          maxLength: 30
        description:
          type: string
          description: Description
          maxLength: 1000
      required:
        - name
        - description
    PostClipFolderMessageRequest:
      title: PostClipFolderMessageRequest
      type: object
      properties:
        messageId:
          type: string
          description: Message UUID
          format: uuid
      required:
        - messageId
      description: Request to add clip
    ClippedMessage:
      title: ClippedMessage
      type: object
      description: Clipped message
      properties:
        Message:
          $ref: '#/components/schemas/Message'
        clippedAt:
          type: string
          description: The date and time of the clip
          format: date-time
      required:
        - folderId
        - message
        - clippedAt
    ChannelEvent:
      title: ChannelEvent
      type: object
      description: Channel event
      properties:
        type:
          type: string
          enum:
            - topic Changed
            - SubscribersChanged
            - PinAdded
            - PinRemoved
            - Name Changed
            - ParentChanged
            - VisibilityChanged
            - ForcedNotificationChanged
            - ChildCreated
          description: Event type
        datetime:
          type: string
          description: Event date and time
          format: date-time
        detail:
          description: Event details
          oneOf:
            - $ref: '#/components/schemas/TopicChangedEvent'
            - $ref: '#/components/schemas/SubscribersChangedEvent'
            - $ref: '#/components/schemas/PinAddedEvent'
            - $ref: '#/components/schemas/PinRemovedEvent'
            - $ref: '#/components/schemas/NameChangedEvent'
            - $ref: '#/components/schemas/ParentChangedEvent'
            - $ref: '#/components/schemas/VisibilityChangedEvent'
            - $ref: '#/components/schemas/ForcedNotificationChangedEvent'
            - $ref: '#/components/schemas/ChildCreatedEvent'
      required:
        - type
        - datetime
        - detail
    TopicChangedEvent:
      title: TopicChangedEvent
      type: object
      description: Topic change event
      properties:
        userId:
          type: string
          description: UUID of the person who made the change
          format: uuid
        before:
          type: string
          description: Previous topic
        after:
          type: string
          description: Changed topic
      required:
        - userId
        - before
        - after
    SubscribersChangedEvent:
      title: SubscribersChangedEvent
      type: object
      description: Subscriber change event
      properties:
        userId:
          type: string
          description: UUID of the person who made the change
          format: uuid
        'on':
          type: array
          description: An array of UUIDs of turned on users
          items:
            type: string
            format: uuid
        'off':
          type: array
          description: An array of UUIDs of users who were turned off
          items:
            type: string
            format: uuid
      required:
        - userId
        - 'on'
        - 'off'
    PinAddedEvent:
      title: PinAddedEvent
      type: object
      description: Pin added event
      properties:
        userId:
          type: string
          description: UUID of the person who made the change
          format: uuid
        messageId:
          type: string
          description: Message UUID
          format: uuid
      required:
        - userId
        - messageId
    PinRemovedEvent:
      title: PinRemovedEvent
      type: object
      description: Pin removal event
      properties:
        userId:
          type: string
          description: UUID of the person who made the change
          format: uuid
        messageId:
          type: string
          description: Message UUID
          format: uuid
      required:
        - userId
        - messageId
    NameChangedEvent:
      title: NameChangedEvent
      type: object
      description: Channel name change event
      properties:
        userId:
          type: string
          description: UUID of the person who made the change
          format: uuid
        before:
          type: string
          description: Previous channel name
        after:
          type: string
          description: New channel name
      required:
        - userId
        - before
        - after
    ParentChangedEvent:
      title: ParentChangedEvent
      type: object
      description: Parent channel change event
      properties:
        userId:
          type: string
          description: UUID of the person who made the change
          format: uuid
        before:
          type: string
          description: Previous parent channel UUID
          format: uuid
        after:
          type: string
          description: New parent channel UUID
          format: uuid
      required:
        - userId
        - before
        - after
    VisibilityChangedEvent:
      title: VisibilityChangedEvent
      type: object
      description: Channel visibility change event.
      properties:
        userId:
          type: string
          description: UUID of the person who made the change
          format: uuid
        visibility:
          type: boolean
          description: Visible state after change
      required:
        - userId
        - visibility
    ForcedNotificationChangedEvent:
      title: ForcedNotificationChangedEvent
      type: object
      description: Channel forced notification state change event
      properties:
        userId:
          type: string
          description: UUID of the person who made the change
          format: uuid
        force:
          type: boolean
          description: Forced notification state after change
      required:
        - userId
        - force
    ChildCreatedEvent:
      title: ChildCreatedEvent
      type: object
      description: Child channel created event
      properties:
        userId:
          type: string
          description: Creator UUID
          format: uuid
        channelId:
          type: string
          description: Channel UUID
          format: uuid
      required:
        - userId
        - channelId
    StampPalette:
      title: StampPalette
      type: object
      description: Stamp palette information
      properties:
        id:
          type: string
          description: Stamp palette UUID
          format: uuid
        name:
          type: string
          description: The name of the palette.
          maxLength: 30
        stamps:
          type: array
          description: An array of UUIDs for the stamps in the palette
          items:
            type: string
            format: uuid
        creatorId:
          type: string
          description: Creator UUID
          format: uuid
        createdAt:
          type: string
          format: date-time
          description: Palette creation date
        updatedAt:
          type: string
          description: Palette update date and time
          format: date-time
        description:
          type: string
          description: Palette description
          maxLength: 1000
      required:
        - id
        - name
        - stamps
        - creatorId
        - createdAt
        - updatedAt
        - description
    PostStampPaletteRequest:
      title: PostStampPaletteRequest
      type: object
      description: Stamp palette creation request
      properties:
        stamps:
          type: array
          description: An array of UUIDs for the stamps in the palette
          uniqueItems: true
          maxItems: 200
          items:
            type: string
            format: uuid
        name:
          type: string
          description: The name of the palette.
          maxLength: 30
        description:
          type: string
          description: Description
          maxLength: 1000
      required:
        - stamps
        - name
        - description
    PatchStampPaletteRequest:
      title: PatchStampPaletteRequest
      type: object
      description: Stamp palette information change request
      properties:
        name:
          type: string
          description: The name of the palette.
          minLength: 1
          maxLength: 30
        description:
          type: string
          description: Description
          maxLength: 1000
        stamps:
          type: array
          description: An array of stamp UUIDs in the palette
          uniqueItems: true
          maxItems: 200
          items:
            type: string
            format: uuid
    PatchStampRequest:
      title: PatchStampRequest
      type: object
      description: Stamp information change request
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: Stamp name
        creatorId:
          type: string
          description: Creator UUID
          format: uuid
    MessagePin:
      title: MessagePin
      type: object
      description: Pin information
      properties:
        userId:
          type: string
          format: uuid
          description: Pinned user UUID
        pinnedAt:
          type: string
          format: date-time
          description: The pinned date and time
      required:
        - userId
        - pinnedAt
    PostUserGroupAdminRequest:
      title: PostUserGroupAdmin
      type: object
      description: Request to add group admin
      properties:
        id:
          type: string
          format: uuid
          description: The UUID of the user to add
      required:
        - id
    ChannelList:
      title: ChannelList
      type: object
      description: GET /channels response
      properties:
        public:
          type: array
          description: An array of public channels.
          items:
            $ref: '#/components/schemas/Channel'
        dm:
          type: array
          description: An array of direct message channels.
          items:
            $ref: '#/components/schemas/DMChannel'
      required:
        - public
    DMChannel:
      title: DMChannel
      type: object
      description: Direct message channel
      properties:
        id:
          type: string
          format: uuid
          description: Channel UUID
        userId:
          type: string
          description: The UUID of the recipient
          format: uuid
      required:
        - id
        - userId
    ActivityTimelineMessage:
      title: ActivityTimelineMessage
      type: object
      description: Message for Timeline activity
      properties:
        id:
          type: string
          format: uuid
          description: Message UUID
        userId:
          type: string
          description: Author UUID
          format: uuid
        channelId:
          type: string
          description: Channel UUID
          format: uuid
        content:
          type: string
          description: The message body.
        createdAt:
          type: string
          format: date-time
          description: Post date
        updatedAt:
          type: string
          format: date-time
          description: Edit date
      required:
        - id
        - userId
        - channelId
        - content
        - createdAt
        - updatedAt
    OAuth2Decide:
      type: object
      required:
        - submit
      properties:
        submit:
          type: string
          description: 'If you agree, use "approve"'
    PostOAuth2Token:
      type: object
      required:
        - grant_type
      properties:
        grant_type:
          type: string
        code:
          type: string
        redirect_uri:
          type: string
        client_id:
          type: string
        code_verifier:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
        scope:
          type: string
        refresh_token:
          type: string
        client_secret:
          type: string
    OAuth2Token:
      type: object
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
        scope:
          type: string
        id_token:
          type: string
    OAuth2Authorization:
      type: object
      required:
        - client_id
      properties:
        response_type:
          $ref: '#/components/schemas/OAuth2ResponseType'
        client_id:
          type: string
        redirect_uri:
          type: string
        scope:
          type: string
        state:
          type: string
        code_challenge:
          type: string
        code_challenge_method:
          type: string
        Nonce:
          type: string
        prompt:
          $ref: '#/components/schemas/OAuth2Prompt'
    OAuth2Prompt:
      type: string
      enum:
        - none
    OAuth2ResponseType:
      type: string
      enum:
        - code
        - token
        - none
    OAuth2Revoke:
      title: OAuth2Revoke
      type: object
      required:
        - token
      description: Request body for POST /oauth2/revoke
      properties:
        token:
          type: string
          description: The OAuth2 token or OAuth2 refresh token to revoke
    ExternalProviderUser:
      title: ExternalProviderUser
      type: object
      description: Externally authenticated account user
      properties:
        providername:
          type: string
          description: Name of the external service
        LinkAt:
          type: string
          description: The date and time of linking
        externalname:
          type: string
          description: External account name
      required:
        - providerName
        - linkedAt
        - externalName
    PostLinkExternalAccount:
      title: PostLinkExternalAccount
      type: object
      description: Request body for POST /users/me/ex-accounts/link
      properties:
        providername:
          type: string
          description: Name of the external service
      required:
        - providerName
    PostUnlinkExternalAccount:
      title: PostUnlinkExternalAccount
      type: object
      description: Request body for POST /users/me/ex-accounts/unlink
      properties:
        providername:
          type: string
          description: Name of the external service
      required:
        - providerName
    UserPermission:
      type: string
      title: UserPermission
      description: User privileges
      enum:
        - get_webhook
        - create_webhook
        - edit_webhook
        - delete_webhook
        - access_others_webhook
        - get_bot
        - create_bot
        - edit_bot
        - delete_bot
        - access_others_bot
        - bot_action_join_channel
        - bot_action_leave_channel
        - create_channel
        - get_channel
        - edit_channel
        - delete_channel
        - change_parent_channel
        - edit_channel_topic
        - get_channel_star
        - edit_channel_star
        - get_my_tokens
        - revoke_my_token
        - get_clients
        - create_client
        - edit_my_client
        - delete_my_client
        - manage_others_client
        - upload_file
        - download_file
        - delete_file
        - get_message
        - post_message
        - edit_message
        - delete_message
        - report_message
        - get_message_reports
        - create_message_pin
        - delete_message_pin
        - get_channel_subscription
        - edit_channel_subscription
        - connect_notification_stream
        - register_fcm_device
        - get_stamp
        - create_stamp
        - edit_stamp
        - edit_stamp_created_by_others
        - delete_stamp
        - delete_my_stamp
        - add_message_stamp
        - remove_message_stamp
        - get_my_stamp_history
        - get_stamp_palette
        - create_stamp_palette
        - edit_stamp_palette
        - delete_stamp_palette
        - get_user
        - register_user
        - get_me
        - get_oidc_userinfo
        - edit_me
        - change_my_icon
        - change_my_password
        - edit_other_users
        - get_user_qr_code
        - get_user_tag
        - edit_user_tag
        - get_user_group
        - create_user_group
        - create_special_user_group
        - edit_user_group
        - delete_user_group
        - edit_others_user_group
        - web_rtc
        - get_my_sessions
        - delete_my_sessions
        - get_my_external_account
        - edit_my_external_account
        - get_unread
        - delete_unread
        - get_clip_folder
        - create_clip_folder
        - edit_clip_folder
        - delete_clip_folder
      x-enum-varnames:
        - GetWebhook
        - CreateWebhook
        - EditWebhook
        - DeleteWebhook
        - AccessOthersWebhook
        - GetBot
        - CreateBot
        - EditBot
        - DeleteBot
        - AccessOthersBot
        - BotActionJoinChannel
        - BotActionLeaveChannel
        - CreateChannel
        - GetChannel
        - EditChannel
        - DeleteChannel
        - ChangeParentChannel
        - EditChannelTopic
        - GetChannelStar
        - EditChannelStar
        - GetMyTokens
        - RevokeMyToken
        - GetClients
        - CreateClient
        - EditMyClient
        - DeleteMyClient
        - ManageOthersClient
        - UploadFile
        - DownloadFile
        - DeleteFile
        - GetMessage
        - PostMessage
        - EditMessage
        - DeleteMessage
        - ReportMessage
        - GetMessageReports
        - CreateMessagePin
        - DeleteMessagePin
        - GetChannelSubscription
        - EditChannelSubscription
        - ConnectNotificationStream
        - RegisterFCMDevice
        - GetStamp
        - CreateStamp
        - EditStamp
        - EditStampCreatedByOthers
        - DeleteStamp
        - DeleteMyStamp
        - AddMessageStamp
        - RemoveMessageStamp
        - GetMyStampHistory
        - GetStampPalette
        - CreateStampPalette
        - EditStampPalette
        - DeleteStampPalette
        - GetUser
        - RegisterUser
        - GetMe
        - GetOIDCUserInfo
        - EditMe
        - ChangeMyIcon
        - ChangeMyPassword
        - EditOtherUsers
        - GetUserQRCode
        - GetUserTag
        - EditUserTag
        - GetUserGroup
        - CreateUserGroup
        - CreateSpecialUserGroup
        - EditUserGroup
        - DeleteUserGroup
        - AllUserGroupsAdmin
        - WebRTC
        - GetMySessions
        - DeleteMySessions
        - GetMyExternalAccount
        - EditMyExternalAccount
        - GetUnread
        - DeleteUnread
        - GetClipFolder
        - CreateClipFolder
        - EditClipFolder
        - DeleteClipFolder
    Version:
      title: Version
      type: object
      description: Version server flag information
      properties:
        revision:
          type: string
          description: traQ (server) revision
        version:
          type: string
          description: traQ(server) version
        Flags:
          type: object
          required:
            - externalLogin
            - SignUpAllowed
          properties:
            externalLogin:
              type: array
              description: Valid external login providers
              items:
                type: string
            signUpAllowed:
              type: boolean
              description: Can users register themselves (POST /api/v3/users)?
      required:
        - revision
        - version
        - flags
    WebRTCUserState:
      title: WebRTCUserState
      type: object
      description: WebRTC state
      properties:
        userId:
          type: string
          description: User UUID
          format: uuid
        channelId:
          type: string
          description: Channel UUID
          format: uuid
        sessions:
          type: array
          description: An array of sessions.
          items:
            $ref: '#/components/schemas/Session'
      required:
        - userId
        - channelId
        - sessions
    MessageClip:
      title: MessageClip
      type: object
      properties:
        FolderId:
          type: string
          format: uuid
          description: The ID of the folder being clipped
        clippedAt:
          type: string
          format: date-time
          description: The date and time the clip was taken
      required:
        - folderId
        - clippedAt
      description: Message clip
    Ogp:
      title: Ogp
      type: object
      x-tags:
        - ogp
      description: Information about OGP
      properties:
        type:
          type: string
        title:
          type: string
        url:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/OgpMedia'
        description:
          type: string
        Videos:
          type: array
          items:
            $ref: '#/components/schemas/OgpMedia'
      required:
        - type
        - title
        - url
        - images
        - description
        - videos
    OgpMedia:
      title: OgpMedia
      type: object
      x-tags:
        - ogp
      description: Information about the image contained in the OGP
      properties:
        url:
          type: string
        secureUrl:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        width:
          type: integer
          nullable: true
        height:
          type: integer
          nullable: true
      required:
        - url
        - secureUrl
        - type
        - width
        - height
      x-examples: {}
    GetNotifyCitation:
      title: GetNotifyCitation
      type: object
      description: Message quote notification settings information
      properties:
        notifyCitation:
          type: boolean
      required:
        - notifyCitation
    UserSettings:
      title: UserSettings
      type: object
      description: User preference information
      properties:
        id:
          type: string
          description: User UUID
          format: uuid
        notifyCitation:
          type: boolean
          description: Message quote notification settings information
      required:
        - id
        - notifyCitation
    PutNotifyCitationRequest:
      title: PutNotifyCitationRequest
      type: object
      description: Request to set message quote notifications
      properties:
        notifyCitation:
          type: boolean
          description: Message quote notification settings information
      required:
        - notifyCitation
    ChannelPath:
      title: ChannelPath
      type: object
      description: Channel path
      properties:
        path:
          type: string
          description: Channel path
          pattern: '^(\/[a-zA-Z0-9-_]+)+$'
      required:
        - path
      example:
        path: '/general'
    Session:
      type: object
      properties:
        state:
          type: string
          description: Status
        sessionId:
          type: string
          description: Session ID
      required:
        - state
        - sessionId
  headers:
    X-TRAQ-MORE:
      schema:
        type: boolean
      description: whether there are more elements in the specified range
  parameters:
    paletteIdInPath:
      name: paletteId
      in: path
      required: true
      description: Stamp palette UUID
      schema:
        type: string
        format: uuid
    folderIdInPath:
      name: folderId
      in: path
      required: true
      description: Clip folder UUID
      schema:
        type: string
        format: uuid
    botIdInPath:
      name: botId
      in: path
      required: true
      description: BOTUUID
      schema:
        type: string
        format: uuid
    clientIdInPath:
      name: clientId
      in: path
      required: true
      description: OAuth2 client UUID
      schema:
        type: string
    tokenIdInPath:
      name: tokenId
      in: path
      required: true
      description: OAuth2 token UUID
      schema:
        type: string
        format: uuid
    sessionIdInPath:
      name: sessionId
      in: path
      required: true
      description: Session UUID
      schema:
        type: string
        format: uuid
    redirectInQuery:
      schema:
        type: string
        format: uri
      description: The redirect destination
      name: redirect
      in: query
    tagIdInPath:
      name: tagId
      in: path
      required: true
      description: Tag UUID
      schema:
        type: string
        format: uuid
    webhookIdInPath:
      name: webhookId
      in: path
      required: true
      description: WebhookUUID
      schema:
        type: string
        format: uuid
    groupIdInPath:
      name: groupId
      in: path
      required: true
      description: User group UUID
      schema:
        type: string
        format: uuid
    userIdInPath:
      name: userId
      in: path
      required: true
      description: User UUID
      schema:
        type: string
        format: uuid
    stampIdInPath:
      name: stampId
      in: path
      required: true
      description: Stamp UUID
      schema:
        type: string
        format: uuid
    fileIdInPath:
      name: fileId
      in: path
      required: true
      description: File UUID
      schema:
        type: string
        format: uuid
    messageIdInPath:
      name: messageId
      in: path
      required: true
      description: Message UUID
      schema:
        type: string
        format: uuid
    limitInQuery:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 200
      description: Number of items to retrieve
      example: 50
    offsetInQuery:
      in: query
      name: offset
      schema:
        type: integer
        default: 0
      description: The offset to get.
      example: 150
    sinceInQuery:
      in: query
      name: since
      schema:
        type: string
        format: date-time
        default: '0000-01-01T00:00:00.000000Z'
      description: The start date and time of the time range to be retrieved
      example: '2016-10-12T11:00:00.000000Z'
    untilInQuery:
      in: query
      name: until
      schema:
        type: string
        format: date-time
      description: The end date and time of the time range to be retrieved
      example: '2016-10-12T11:00:00.0000000Z'
    inclusiveInQuery:
      in: query
      name: inclusive
      schema:
        type: boolean
        default: false
      description: Whether to include the range ends
    orderInQuery:
      in: query
      name: order
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
      description: Ascending or descending
    channelIdInPath:
      name: channelId
      in: path
      required: true
      description: Channel UUID
      schema:
        type: string
        format: uuid
tags:
  - name: user
    description: User API
  - name: me
    description: My User API
  - name: message
    description: Message API
  - name: channel
    description: Channel API
  - name: file
    description: File API
  - name: user tag
    description: User Tag API
  - name: notification
    description: Notification API
  - name: stamp
    description: Stamp API
  - name: webhook
    description: traQ Webhook API
  - name: star
    description: Star API
  - name: pin
    description: Pin API
  - name: group
    description: User Group API
  - name: public
    description: Public API
  - name: authentication
    description: Authentication API
  - name: activity
    description: Activity API
  - name: oauth2
    description: OAuth2 related API
  - name: bot
    description: traQ BOT API
  - name: webrtc
    description: WebRTC API
  - name: clip
    description: Clip API
  - name: ogp
    description: OGP API
security:
  - OAuth2: []
  - bearerAuth: []